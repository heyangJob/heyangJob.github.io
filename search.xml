<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android_插件化实现方式（Hook）]]></title>
    <url>%2F2019%2F04%2F10%2FAndroid-%E6%8F%92%E4%BB%B6%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%EF%BC%88Hook%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、首先我们要找到Hook的点1. 分析 我们先大概看下activity的启动流程(图片来自Android 插件化开发指南) 当我们调用startActivity的时候，AMS对我们要启动的Activity进行检查，是否在AndroidManifest中声明过，如果没有就报没有在AndroidManifest的错误。这个时候需要欺骗AMS，我们需要hook，要它去检查一个我们预配置的Activity，通过AMS的检查。 为什么不能直接hook掉AMS，AMS是系统的进程，管理者所有app的启动，不仅仅只是我们自己的app。 2. 看看源码怎么启动的（主要就是拦截这个方法startActivity）1234567//通过ActivityManagerNative.getDefault()获取一个对象，开始启动新的Activity int result = ActivityManagerNative.getDefault().startActivity(whoThread, who.getBasePackageName(), intent,intent.resolveTypeIfNeeded(who.getContentResolver()), token, target != null ? target.mEmbeddedID : null, requestCode, 0, null, options); 3. 看看代码的实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869private Context mContext;private Class&lt;?&gt; mProxyClass;private String TAG = HookUtil.class.getName();private final String EXTRA_ORIGIN_INTENT = &quot;EXTRA_ORIGIN_INTENT&quot;;public HookUtil(Context context, Class&lt;?&gt; proxyClass) &#123; this.mContext = context.getApplicationContext(); this.mProxyClass = proxyClass;&#125;public void hookStartActivity() throws Exception &#123; //1. 通过反射，拿到IActivityManager对象； Class amnClass = Class.forName(&quot;android.app.ActivityManagerNative&quot;); //2. 获得指定的私有属性 Field gDefaultField = amnClass.getDeclaredField(&quot;gDefault&quot;); gDefaultField.setAccessible(true); // 获取字段上面的值传递null 证明是属性是static的,此处返回的是 // new Singleton&lt;IActivityManager&gt;() Object gDefault = gDefaultField.get(null); Class singletonClass = Class.forName(&quot;android.util.Singleton&quot;); Field mInstanceField = singletonClass.getDeclaredField(&quot;mInstance&quot;); mInstanceField.setAccessible(true); //不是static的方法 ，需要传入当前使用的对象 此处返回的是IActivityManager Object iamInstance = mInstanceField.get(gDefault); Class iamClass = Class.forName(&quot;android.app.IActivityManager&quot;); Object proxyInstance = Proxy.newProxyInstance(HookUtil.class.getClassLoader(), new Class[]&#123;iamClass&#125;, // InvocationHandler 必须执行者，谁去执行 new StartActivityInvocationHandler(iamInstance)); //f.set(obj, &quot;刘德华&quot;); mInstanceField.set(gDefault, proxyInstance);&#125; private class StartActivityInvocationHandler implements InvocationHandler &#123; // 方法执行者 private Object mObject; public StartActivityInvocationHandler(Object object) &#123; this.mObject = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; // 替换Intent,过AndroidManifest.xml检测 if (method.getName().equals(&quot;startActivity&quot;)) &#123; Log.e(TAG,&quot;Activity已经开始启动&quot;); Log.e(TAG,&quot;小弟到此一游！！！&quot;); // 1.首先获取原来的Intent Intent originIntent = (Intent) args[2]; // 2.创建一个安全的 Intent safeIntent = new Intent(mContext, mProxyClass); args[2] = safeIntent; // 3.绑定原来的Intent safeIntent.putExtra(EXTRA_ORIGIN_INTENT, originIntent); &#125; return method.invoke(mObject, args); &#125;&#125; 4. 初始化插件12345678910111213141516171819202122232425protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); mButton.setText(&quot;test&quot;); //初始化插件 HookUtil hookUtil = new HookUtil(this, ProxyActivity.class); try &#123; hookUtil.hookStartActivity(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @OnClick(R.id.btn) public void btnOnclick() &#123; Intent intent = new Intent(MainActivity.this, Main3Activity.class ); startActivity(intent); &#125; 5. 打印结果(没有报错，打印了当前activity的stop方法,证明通过AMS的检查了)12com.dhcc.net.plug.HookUtil: Activity已经开始启动com.dhcc.net.plug.HookUtil: 小弟到此一游！！！ 二、启动时替换成我们自己的Actvity1. 当AMS加载activty完成以后，就要启动activity了，这个时候他是通过ActivityThread类中的Handler去处理的。我们首先看看Handler是怎么分发消息的（我们处理msg.callback，将优先级最大化）123456789101112131415/** * Handle system messages here. */ public void dispatchMessage(Message msg) &#123; if (msg.callback != null) &#123; handleCallback(msg); &#125; else &#123; if (mCallback != null) &#123; if (mCallback.handleMessage(msg)) &#123; return; &#125; &#125; handleMessage(msg); &#125; &#125; 2. 替换成为自己的Activity1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public void hookLaunchActivity() throws Exception&#123; // 3.4.1 获取ActivityThread实例 Class&lt;?&gt; atClass = Class.forName(&quot;android.app.ActivityThread&quot;); Field scatField = atClass.getDeclaredField(&quot;sCurrentActivityThread&quot;); scatField.setAccessible(true); Object sCurrentActivityThread = scatField.get(null); // 3.4.2 获取ActivityThread中的mH Field mhField = atClass.getDeclaredField(&quot;mH&quot;); mhField.setAccessible(true); Object mHandler = mhField.get(sCurrentActivityThread); // 3.4 设置当前对象（也就是ActivityThread）的mH的成员变量 Class&lt;?&gt; handlerClass = Class.forName(&quot;android.os.Handler&quot;); Field mCallbackField = handlerClass.getDeclaredField(&quot;mCallback&quot;); mCallbackField.setAccessible(true); mCallbackField.set(mHandler,new HandlerCallBack()); &#125; private class HandlerCallBack implements Handler.Callback&#123; @Override public boolean handleMessage(Message msg) &#123; Log.e(TAG,&quot;handleMessage&quot;); // 每发一个消息都会走一次这个CallBack发放 if(msg.what == 100)&#123; handleLaunchActivity(msg); &#125; return false; &#125; /** * 开始启动创建Activity拦截 * @param msg */ private void handleLaunchActivity(Message msg) &#123; try &#123; Object record = msg.obj; // 1.从record 获取过安检的Intent Field intentField = record.getClass().getDeclaredField(&quot;intent&quot;); intentField.setAccessible(true); Intent proxyInent = (Intent) intentField.get(record); // 2.从safeIntent中获取原来的originIntent Intent realIntent = proxyInent.getParcelableExtra(EXTRA_ORIGIN_INTENT); // 3.重新设置回去 if(realIntent != null)&#123; Log.e(TAG,&quot;启动我们自己的activity了&quot;); intentField.set(record,realIntent); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; &#125; 3. 修改一下OnCreate方法1234567891011121314151617 protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); mButton.setText(&quot;test&quot;); //初始化插件 HookUtil hookUtil =new HookUtil(this, ProxyActivity.class); try &#123; hookUtil.hookStartActivity(); hookUtil.hookLaunchActivity(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; 4. 看看打印结果1234com.dhcc.net.plug.HookUtil: Activity已经开始启动com.dhcc.net.plug.HookUtil: 小弟到此一游！！！com.dhcc.net.plug.HookUtil: 启动我们自己的activity了com.dhcc.net E/Main3Activity: 我是没有注册的Activity]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android_Handler源码分析]]></title>
    <url>%2F2019%2F04%2F09%2FAndroid-Handler%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、源码分析1. 一般调用1mHandler.sendEmptyMessage(100); 2. Handler.java12345678910111213141516171819202122232425262728293031323334353637public final boolean sendEmptyMessage(int what)&#123; return sendEmptyMessageDelayed(what, 0);&#125;public final boolean sendEmptyMessageDelayed(int what, long delayMillis) &#123; Message msg = Message.obtain(); msg.what = what; return sendMessageDelayed(msg, delayMillis);&#125;public final boolean sendMessageDelayed(Message msg, long delayMillis) &#123; if (delayMillis &lt; 0) &#123; delayMillis = 0; &#125; return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis); &#125; public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123; MessageQueue queue = mQueue; if (queue == null) &#123; RuntimeException e = new RuntimeException( this + &quot; sendMessageAtTime() called with no mQueue&quot;); Log.w(&quot;Looper&quot;, e.getMessage(), e); return false; &#125; return enqueueMessage(queue, msg, uptimeMillis); &#125;private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123; msg.target = this; if (mAsynchronous) &#123; msg.setAsynchronous(true); &#125; return queue.enqueueMessage(msg, uptimeMillis); &#125; 3. MessageQueue.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455boolean enqueueMessage(Message msg, long when) &#123; if (msg.target == null) &#123; throw new IllegalArgumentException(&quot;Message must have a target.&quot;); &#125; if (msg.isInUse()) &#123; throw new IllegalStateException(msg + &quot; This message is already in use.&quot;); &#125; synchronized (this) &#123; if (mQuitting) &#123; IllegalStateException e = new IllegalStateException( msg.target + &quot; sending message to a Handler on a dead thread&quot;); Log.w(TAG, e.getMessage(), e); msg.recycle(); return false; &#125; msg.markInUse(); msg.when = when; Message p = mMessages; boolean needWake; // 第一次添加数据到队列中，或者当前 msg 的时间小于 mMessages 的时间 if (p == null || when == 0 || when &lt; p.when) &#123; // New head, wake up the event queue if blocked. msg.next = p; mMessages = msg; needWake = mBlocked; &#125; else &#123; // Inserted within the middle of the queue. Usually we don&apos;t have to wake // up the event queue unless there is a barrier at the head of the queue // and the message is the earliest asynchronous message in the queue. needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous(); Message prev; for (;;) &#123; prev = p; p = p.next; if (p == null || when &lt; p.when) &#123; break; &#125; if (needWake &amp;&amp; p.isAsynchronous()) &#123; needWake = false; &#125; &#125; // 把当前 msg 插入到列表中 msg.next = p; // invariant: p == prev.next prev.next = msg; &#125; // We can assume mPtr != 0 because mQuitting is false. if (needWake) &#123; nativeWake(mPtr); &#125; &#125; return true; &#125; 4.把消息都存到队列里面去了，然后他们是怎么轮训的呢？（Looper.java）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 /** * Run the message queue in this thread. Be sure to call * &#123;@link #quit()&#125; to end the loop.*/public static void loop() &#123; final Looper me = myLooper(); if (me == null) &#123; throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;); &#125; final MessageQueue queue = me.mQueue; // Make sure the identity of this thread is that of the local process, // and keep track of what that identity token actually is. Binder.clearCallingIdentity(); final long ident = Binder.clearCallingIdentity(); for (;;) &#123; // 不断的从消息队列里面取消息 Message msg = queue.next(); // might block if (msg == null) &#123; // No message indicates that the message queue is quitting. return; &#125; // This must be in a local variable, in case a UI event sets the logger Printer logging = me.mLogging; if (logging != null) &#123; logging.println(&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot; + msg.target + &quot; &quot; + msg.callback + &quot;: &quot; + msg.what); &#125; // 通过 target 去 dispatchMessage 而 target 就是绑定的 Handler msg.target.dispatchMessage(msg); if (logging != null) &#123; logging.println(&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot; + msg.target + &quot; &quot; + msg.callback); &#125; // Make sure that during the course of dispatching the // identity of the thread wasn&apos;t corrupted. final long newIdent = Binder.clearCallingIdentity(); if (ident != newIdent) &#123; Log.wtf(TAG, &quot;Thread identity changed from 0x&quot; + Long.toHexString(ident) + &quot; to 0x&quot; + Long.toHexString(newIdent) + &quot; while dispatching to &quot; + msg.target.getClass().getName() + &quot; &quot; + msg.callback + &quot; what=&quot; + msg.what); &#125; msg.recycleUnchecked(); &#125; &#125; 5. 这个loop是什么时候调用的呢？我们看看ActivityThread的main方法（ActivityThread.java）12345678910111213141516171819202122232425262728public static void main(String[] args) &#123; Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ActivityThreadMain&quot;); SamplingProfilerIntegration.start(); Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;); // 初始化Looper Looper.prepareMainLooper(); ActivityThread thread = new ActivityThread(); thread.attach(false); if (sMainThreadHandler == null) &#123; sMainThreadHandler = thread.getHandler(); &#125; if (false) &#123; Looper.myLooper().setMessageLogging(new LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;)); &#125; // End of event ActivityThreadMain. Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER); // 开始轮训 Looper.loop(); &#125; 6. 总结 handler.sendMessage 其实只是把我们的 Message 加入了消息队列，队列采用的是链表的方式，按照 when 也就是时间排序，然后再也没干其他； Looper的loop一直轮训这个队列，这是一个死循环，然后调用message的target，就是我们写的Handler执行dispatchMessage。 当Laucher启动一个App的时候，首先会通过zygote Fork一个进程，然后进程会执行ActivityThread的main函数，在main函数里面初始化looper，执行loop。 二、自己手写1. Handler12345678910111213141516171819202122232425262728293031323334353637383940414243public class Handler &#123; // 包含一个消息队列 MessageQueue mQueue; public Handler() &#123; //获取looper 轮训器。在Activity启动的时候创建 Looper looper = Looper.myLooper(); if(looper == null)&#123; throw new RuntimeException( &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;); &#125; mQueue= looper.mQueue; &#125; public void sendMessage(Message message) &#123; sendMessageDelayed(message,0); &#125; public final boolean sendMessageDelayed(Message msg, long delayMillis) &#123; if (delayMillis &lt; 0) &#123; delayMillis = 0; &#125; return sendMessageAtTime(msg, System.currentTimeMillis() + delayMillis); &#125; public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123; MessageQueue queue = mQueue; return enqueueMessage(queue, msg, uptimeMillis); &#125; private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123; msg.target = this; return queue.enqueueMessage(msg, uptimeMillis); &#125; // 空方法并没具体的实现 public void handleMessage(Message msg) &#123; &#125;&#125; 2. Looper1234567891011121314151617181920212223242526272829303132333435public class Looper &#123; // sThreadLocal.get() will return null unless you&apos;ve called prepare(). static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;(); public static void prepare() &#123; sThreadLocal.set(new Looper()); &#125; MessageQueue mQueue; public Looper() &#123; mQueue = new MessageQueue(); &#125; public static void loop() &#123; //无限轮训 获取队列里面的消息 Looper looper = myLooper(); for(;;)&#123; MessageQueue queue = looper.mQueue; Message message = queue.next(); if(message == null)&#123; return; &#125; message.target.handleMessage(message); &#125; &#125; static Looper myLooper() &#123; return sThreadLocal.get(); &#125;&#125; 3. MessageQueue12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970public class MessageQueue &#123; private Message mMessages; // 按照时间排序插入 public boolean enqueueMessage(Message msg, long when) &#123; synchronized (this) &#123; msg.when = when; Message p = mMessages; //按照when 的时间进行排序插入 if (p == null || when == 0 || when &lt; p.when) &#123; // New head, wake up the event queue if blocked. msg.next = p; mMessages = msg; &#125; else &#123; Message prev; for (;;) &#123; prev = p; p = p.next; if (p == null || when &lt; p.when) &#123; break; &#125; &#125; msg.next = p; // invariant: p == prev.next prev.next = msg; &#125; &#125; return true; &#125; // 无限轮训 获取下一个消息 public Message next() &#123; int pendingIdleHandlerCount = -1; // -1 only during first iteration for (;;) &#123; synchronized (this) &#123; // Try to retrieve the next message. Return if found. final long now = System.currentTimeMillis(); Message prevMsg = null; Message msg = mMessages; if (msg != null &amp;&amp; msg.target == null) &#123; // Stalled by a barrier. Find the next asynchronous message // in the queue. do &#123; prevMsg = msg; msg = msg.next; &#125; while (msg != null); &#125; if (msg != null) &#123; if (now &lt; msg.when) &#123; // Next message is not ready. Set a timeout to wake up // when it is ready. &#125; else &#123; if (prevMsg != null) &#123; prevMsg.next = msg.next; &#125; else &#123; mMessages = msg.next; &#125; msg.next = null; return msg; &#125; &#125; else &#123; &#125; if (pendingIdleHandlerCount &lt;= 0) &#123; continue; &#125; &#125; &#125; &#125;&#125; 4. Message12345678public class Message &#123; public Object obj; public Handler target; public long when; public Message next;&#125; 5. 因为Looper是在主线程中执行的，我们来写一个ActivityThread1234567891011121314151617181920public class ActivityThread &#123; final H mH = new H(); public void attach(boolean b) &#123; Activity mainActivity = new TestActivity(); mainActivity.onCreate(); // 通过 Handler 去执行Activity的生命周期 Message message = new Message(); message.obj = mainActivity; mH.sendMessage(message); &#125; private class H extends Handler &#123; public void handleMessage(Message msg) &#123; Activity mainActivity = (Activity) msg.obj; mainActivity.onResume(); &#125; &#125;&#125; 6. 模拟Activity1234567891011121314public class Activity &#123; public void onCreate()&#123; &#125; public void onResume()&#123; &#125; public TextView findViewById(int id)&#123; return new TextView(); &#125;&#125; 7. TestActivity12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * @author 512573717@qq.com * @created 2018/8/23 下午7:08. */public class TestActivity extends Activity &#123; private static final String TAG = &quot;TestActivity&quot;; private TextView mHTextView; private Handler mHHandler = new Handler() &#123; @Override public void handleMessage(Message message) &#123; Log.e(TAG, &quot;当前线程名称====&quot;+Thread.currentThread().getName()); mHTextView.setText((CharSequence) message.obj); &#125; &#125;; @Override public void onCreate() &#123; super.onCreate(); Log.e(TAG, &quot;onCreate&quot;); mHTextView = findViewById(0x111111); new Thread(new Runnable() &#123; @Override public void run() &#123;// mHTextView.setText(&quot;I will be update !!!&quot;); Log.e(TAG, &quot;当前线程名称===&quot;+Thread.currentThread().getName()); try &#123; Thread.sleep(100); Message msg = new Message(); msg.obj = &quot;I will be update !!!&quot;; mHHandler.sendMessage(msg); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; ).start(); &#125; @Override public void onResume() &#123; super.onResume(); Log.e(TAG, &quot;onResume&quot;); &#125;&#125; 8. 模拟UI控件TextView12345678910111213141516171819public class TextView &#123; private Thread mThread; public TextView()&#123; mThread = Thread.currentThread(); &#125; public void setText(CharSequence text)&#123; checkThread(); System.out.println(&quot;更新UI成功：&quot;+text); &#125; void checkThread() &#123; if (mThread != Thread.currentThread()) &#123; throw new RuntimeException( &quot;Only the original thread that created a view hierarchy can touch its views.&quot;); &#125; &#125;&#125; 9. Client12345678910111213141516public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Looper.prepare(); ActivityThread thread = new ActivityThread(); thread.attach(false); Looper.loop(); &#125;&#125; 10 .打印结果123451945-1945/? E/TestActivity: onCreate1945-1945/? E/TestActivity: onResume1945-1957/? E/TestActivity: 当前线程名称===Thread-1611945-1945/demo.dhcc.com.handlerdemo E/TestActivity: 当前线程名称====main1945-1945/demo.dhcc.com.handlerdemo I/System.out: 更新UI成功：I will be update !!! 三、面试相关问题1. 为什么不能再子线程里面创建Handler12345678910new Thread(new Runnable() &#123; @Override public void run() &#123; Handler handler=new Handler(); handler.sendMessage(Message.obtain()); &#125; &#125;).start(); // &emsp;&emsp;这个时候会报错“Can’t create handler inside thread that has not called Looper.prepare()”，查看源码发现。 12345678910111213141516171819public Handler(Callback callback, boolean async) &#123; if (FIND_POTENTIAL_LEAKS) &#123; final Class&lt;? extends Handler&gt; klass = getClass(); if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp; (klass.getModifiers() &amp; Modifier.STATIC) == 0) &#123; Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; + klass.getCanonicalName()); &#125; &#125; mLooper = Looper.myLooper(); if (mLooper == null) &#123; throw new RuntimeException( &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;); &#125; mQueue = mLooper.mQueue; mCallback = callback; mAsynchronous = async; &#125; &emsp;&emsp;修改代码 1234Looper.prepare();Handler handler=new Handler();handler.sendMessage(Message.obtain());Looper.loop(); &emsp;&emsp;为什么这样有可以 12345678910111213141516171819public static void prepare() &#123; prepare(true); &#125; private static void prepare(boolean quitAllowed) &#123; if (sThreadLocal.get() != null) &#123; throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;); &#125; sThreadLocal.set(new Looper(quitAllowed)); &#125; public void set(T value) &#123; Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); &#125; &emsp;&emsp;为什么主线程的可以（ActivityThread.java）123456789101112131415161718192021222324252627public static void main(String[] args) &#123; Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ActivityThreadMain&quot;); SamplingProfilerIntegration.start(); Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;); // 启动时已经创建了 Looper.prepareMainLooper(); ActivityThread thread = new ActivityThread(); thread.attach(false); if (sMainThreadHandler == null) &#123; sMainThreadHandler = thread.getHandler(); &#125; if (false) &#123; Looper.myLooper().setMessageLogging(new LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;)); &#125; // End of event ActivityThreadMain. Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER); Looper.loop(); &#125; 总结&emsp;&emsp; 一个Looper对应一个线程。存放在ThreadLocal里面。Looper必须创建了才有消息队列。如果没有消息队列Message就没地方存。所以必须先创建Looper。]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_装饰模式（十五）]]></title>
    <url>%2F2019%2F04%2F08%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;继续上一节的外观模式，我们在来说装饰模式。 示例地址&emsp;&emsp;Demo 类图 定义&emsp;&emsp;动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。 使用场景&emsp;&emsp;需要透明且动态地扩展的功能时。 装饰模式角色介绍&emsp;&emsp;1. Component：抽象组件，被装饰的原始对象。&emsp;&emsp;2. ConcreteComponent: 组件具体实现类。装饰的具体对象。&emsp;&emsp;3. Decorator:抽象的装饰者，用来装饰组件的。一般是为抽象类。如果装饰单一，该类可直接作为具体的装饰者。&emsp;&emsp;4. ConcreteDecoratorA：装饰者具体实现类。 装饰模式示例&emsp;&emsp;最近帮别人买了手机。然后他自己贴了一个钢化膜，买了一个手机外壳，加上一个吊坠，格外的珍惜。不过比之前漂亮了不少。突然发现这是典型的装饰模式啊。 1. 定义手机接口12345678910/** * 手机 * * @author 512573717@qq.com * @created 2018/7/25 下午5:30. */public interface IPhone &#123; //装饰 void decorate();&#125; 2. 实现手机接口（被装饰的对象 华为手机）123456789101112/** * 华为手机 * * @author 512573717@qq.com * @created 2018/7/26 下午1:59. */public class HuaWeiPhone implements IPhone&#123; @Override public void decorate() &#123; System.out.println(&quot;华为手机&quot;); &#125;&#125; 3. 装饰者（外壳）12345678910111213141516171819/** * 外壳 * * @author 512573717@qq.com * @created 2018/7/26 下午2:01. */public abstract class Shell implements IPhone &#123; private IPhone mHuaWeiPhone; public Shell(IPhone huaWeiPhone) &#123; mHuaWeiPhone = huaWeiPhone; &#125; @Override public void decorate() &#123; mHuaWeiPhone.decorate(); &#125;&#125; 4. 粉红色的外壳加挂坠123456789101112131415161718192021222324252627/** * 红色的外壳 * * @author 512573717@qq.com * @created 2018/7/26 下午2:05. */public class RedShell extends Shell &#123; public RedShell(IPhone huaWeiPhone) &#123; super(huaWeiPhone); &#125; public void shell() &#123; System.out.println(&quot;粉红色外壳&quot;); &#125; public void pendant() &#123; System.out.println(&quot;小猪佩奇挂件&quot;); &#125; @Override public void decorate() &#123; super.decorate(); shell(); pendant(); &#125;&#125; 5. 装饰者（贴膜）1234567891011121314151617181920/** * 手机贴膜 * * @author 512573717@qq.com * @created 2018/7/26 下午2:17. */public abstract class Membrane implements IPhone &#123; private IPhone mHuaWeiPhone; public Membrane(IPhone huaWeiPhone) &#123; mHuaWeiPhone = huaWeiPhone; &#125; @Override public void decorate() &#123; mHuaWeiPhone.decorate(); &#125;&#125; 6. 贴钢化膜12345678910111213141516171819202122/** * 钢化膜 * * @author 512573717@qq.com * @created 2018/7/26 下午2:22. */public class TemperingMembrane extends Membrane &#123; public TemperingMembrane(IPhone huaWeiPhone) &#123; super(huaWeiPhone); &#125; public void pasting() &#123; System.out.println(&quot;蓝光钢化膜&quot;); &#125; @Override public void decorate() &#123; super.decorate(); pasting(); &#125;&#125; 7. Client123456789IPhone phone = new HuaWeiPhone();System.out.println(&quot;装饰外壳&quot;);RedShell redShell = new RedShell(phone);redShell.decorate();System.out.println(&quot;手机贴膜&quot;);TemperingMembrane temperingMembrane = new TemperingMembrane(redShell);temperingMembrane.decorate(); 总结&emsp;&emsp;装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体装饰类。 &emsp;&emsp;1. 优点：&emsp;&emsp;&emsp;&emsp;扩展对象功能，比继承灵活，不会导致类个数急剧增加&emsp;&emsp;&emsp;&emsp;可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象&emsp;&emsp;&emsp;&emsp;具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类 &emsp;&emsp;2. 缺点：&emsp;&emsp;&emsp;&emsp;产生很多小对象。大量小对象占据内存，一定程度上影响性能&emsp;&emsp;&emsp;&emsp;装饰模式易于出错，调试排查比较麻烦]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_外观模式（十四）]]></title>
    <url>%2F2019%2F04%2F07%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言 &emsp;&emsp;上一节我们讲了适配器模式，这回我们来说说外观模式。 示例地址&emsp;&emsp;Demo 类图 定义&emsp;&emsp;要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。 使用场景&emsp;&emsp;1. 为一个复杂子系统提供一个简单接口。子系统往往因为不断演化而变得越来越复杂，甚至可能被替换。大多数模式使用时都会产生更多、更小的类，在这使子系统更具可重用性的同时也更容易对子系统进行定制、修改，这种易变性使得隐藏子系统的具体实现变得尤为重要。外观模式提供一个简单统一的接口。对外隐藏子系统的具体实现、隔离变化。&emsp;&emsp;2. 当你需要构建一个层次结构的子系统时，使用外观模式定义子系统中每层的入扣点。如果子系统之间是相互依赖的，你可以让他们仅通过外观接口进行通信，从而简化了他们之间的依赖关系。 外观模式示例&emsp;&emsp;之前我们开一个公司需要跑三个部门，流程比较麻烦。“前前后后加起来，即使你对业务非常熟悉、材料齐备、不出任何差错，也至少需要去３个部门跑６趟，前后加起来十几个工作日就过去了。”然后 15年国家出了一个政策“三证合一，就可以将所有材料集中送到一个窗口，材料在政府部门内部流转，企业不需要再跑路，经过５至１０个工作日就可一次性拿完三个证件。 1. 工商营业执照1234567891011/** * 工商营业执照 * * @author 512573717@qq.com * @created 2018/7/25 下午2:19. */public class BusinessCertificate &#123; public void transaction() &#123; System.out.println(&quot;工商行政管理部门办理 营业执照&quot;); &#125;&#125; 2. 组织机构代码证1234567891011/** * 组织机构代码证 * * @author 512573717@qq.com * @created 2018/7/25 下午2:21. */public class OrganizationCertificate &#123; public void transaction() &#123; System.out.println(&quot;组织机构代码管理部门办理 组织机构代码证&quot;); &#125;&#125; 3. 税务登记证1234567891011/** * 税务登记证 * * @author 512573717@qq.com * @created 2018/7/25 下午2:23. */public class TaxationCertificate &#123; public void transaction() &#123; System.out.println(&quot;税务部门办理 税务登记证&quot;); &#125;&#125; 4. 门面模式（一个窗口解决所有）1234567891011121314151617181920212223242526272829/** * 三证合一 门面模式 * * @author 512573717@qq.com * @created 2018/7/25 下午2:30. */public class FacadeCertificate &#123; private OrganizationCertificate mOrganizationCertificate; private TaxationCertificate mTaxationCertificate; private BusinessCertificate mBusinessCertificate; public FacadeCertificate() &#123; mOrganizationCertificate = new OrganizationCertificate(); mTaxationCertificate = new TaxationCertificate(); mBusinessCertificate = new BusinessCertificate(); &#125; public void transact() &#123; System.out.println(&quot;收到申请人提供的材料&quot;); // 办理营业执照 mBusinessCertificate.transaction(); // 组织机构 mOrganizationCertificate.transaction(); // 税务证 mTaxationCertificate.transaction(); &#125;&#125; 5. Client1234System.out.println(&quot;老王去窗口注册企业，提交相关材料&quot;);FacadeCertificate facadeCertificate=new FacadeCertificate();facadeCertificate.transact();System.out.println(&quot;15个工作日 出证&quot;); 总结&emsp;&emsp;外观模式的目的不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合，从而让外部能够更简单地使用子系统。&emsp;&emsp;外观模式的本质是：封装交互，简化调用。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android_ButterKnife源码分析]]></title>
    <url>%2F2019%2F04%2F06%2FAndroid-ButterKnife%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、先看看ButterKnife的简单使用1. 导入ButterKnife12implementation &apos;com.jakewharton:butterknife:8.8.1&apos;annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos; 2. MainActivity（绑定当前view）1234567891011121314151617@BindView(R.id.btn)Button mButton;protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.bind(this); mButton.setText(&quot;test&quot;);&#125;@OnClick(R.id.btn)public void btnOnclick() &#123; Intent intent = new Intent(MainActivity.this, Main3Activity.class ); startActivity(intent);&#125; 二、源码分析（ButterKnife.java）1. 看看bind做了什么事件，其实就是返回一个Unbinder对象。这个对象是一个（clsName + “_ViewBinding”）的类，实现Unbinder。（这里使用的反射）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@NonNull @UiThread public static Unbinder bind(@NonNull Object target, @NonNull Dialog source) &#123; View sourceView = source.getWindow().getDecorView(); return createBinding(target, sourceView); &#125; private static Unbinder createBinding(@NonNull Object target, @NonNull View source) &#123; Class&lt;?&gt; targetClass = target.getClass(); if (debug) Log.d(TAG, &quot;Looking up binding for &quot; + targetClass.getName()); Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass); if (constructor == null) &#123; return Unbinder.EMPTY; &#125; //反射创建Unbinder return constructor.newInstance(target, source); &#125; private static Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) &#123; // 缓存的LinkedHashMap 查找当前的activity是否缓存 Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls); if (bindingCtor != null) &#123; if (debug) Log.d(TAG, &quot;HIT: Cached in binding map.&quot;); return bindingCtor; &#125; String clsName = cls.getName(); if (clsName.startsWith(&quot;android.&quot;) || clsName.startsWith(&quot;java.&quot;)) &#123; if (debug) Log.d(TAG, &quot;MISS: Reached framework class. Abandoning search.&quot;); return null; &#125; try &#123; Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + &quot;_ViewBinding&quot;); //noinspection unchecked bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View.class); if (debug) Log.d(TAG, &quot;HIT: Loaded binding class and constructor.&quot;); &#125; catch (ClassNotFoundException e) &#123; if (debug) Log.d(TAG, &quot;Not found. Trying superclass &quot; + cls.getSuperclass().getName()); bindingCtor = findBindingConstructorForClass(cls.getSuperclass()); &#125; catch (NoSuchMethodException e) &#123; throw new RuntimeException(&quot;Unable to find binding constructor for &quot; + clsName, e); &#125; // ViewBinder的子类的类名(MainActivity$$ViewBinder)，然后通过反射的形式创建(MainActivity$$ViewBinder)的实例，并存入缓存 BINDINGS.put(cls, bindingCtor); return bindingCtor; &#125; 2. 看看Unbinder是什么123456public interface Unbinder &#123; @UiThread void unbind(); Unbinder EMPTY = new Unbinder() &#123; @Override public void unbind() &#123; &#125; &#125;; 3. 看看生成的MainActivity_ViewBinding.java是什么样子的（在build/generated/source/apt文件夹）1234567891011121314151617181920212223242526272829303132333435363738394041 public class MainActivity_ViewBinding implements Unbinder &#123; private MainActivity target; private View view2131165218; @UiThread public MainActivity_ViewBinding(MainActivity target) &#123; this(target, target.getWindow().getDecorView()); &#125; @UiThread public MainActivity_ViewBinding(final MainActivity target, View source) &#123; this.target = target; View view; // 主要就是 View view = source.findViewById(id); view = Utils.findRequiredView(source, R.id.btn, &quot;field &apos;mButton&apos; and method &apos;btnOnclick&apos;&quot;); target.mButton = Utils.castView(view, R.id.btn, &quot;field &apos;mButton&apos;&quot;, Button.class); view2131165218 = view; // 设置点击事件 view.setOnClickListener(new DebouncingOnClickListener() &#123; @Override public void doClick(View p0) &#123; target.btnOnclick(); &#125; &#125;); &#125; @Override @CallSuper public void unbind() &#123; MainActivity target = this.target; if (target == null) throw new IllegalStateException(&quot;Bindings already cleared.&quot;); this.target = null; target.mButton = null; view2131165218.setOnClickListener(null); view2131165218 = null; &#125;&#125; 4. 这个类是怎么生成的，使用了APT（编译时解析技术）,对于注解在编译时候解析是通过我们自定义一个继承AbstractProcessor的类来完成的。所以我们找找ButterKnife的源码，在butterknife-compile (ButterKnifeProcessor.java)1234567891011121314151617@Override public boolean process(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env) &#123; Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env); for (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123; TypeElement typeElement = entry.getKey(); BindingSet binding = entry.getValue(); JavaFile javaFile = binding.brewJava(sdk, debuggable); try &#123; javaFile.writeTo(filer); &#125; catch (IOException e) &#123; error(typeElement, &quot;Unable to write binding for type %s: %s&quot;, typeElement, e.getMessage()); &#125; &#125; return false;&#125; 5. 可以看出这个类主要就是做了两件事，首先是通过findAndParseTargets方法找出该类里所有注解，然后通过binding.brewJava方法将这些注解进行处理。1234567891011121314151617181920private Map&lt;TypeElement, BindingSet&gt; findAndParseTargets(RoundEnvironment env) &#123; Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = new LinkedHashMap&lt;&gt;(); Set&lt;TypeElement&gt; erasedTargetNames = new LinkedHashSet&lt;&gt;(); // Process each @BindView element. for (Element element : env.getElementsAnnotatedWith(BindView.class)) &#123; // we don&apos;t SuperficialValidation.validateElement(element) // so that an unresolved View type can be generated by later processing rounds try &#123; // 创建一个BindingSet抽象类，然后将我们注解信息处理后保存在里面 parseBindView(element, builderMap, erasedTargetNames); &#125; catch (Exception e) &#123; logParsingError(element, BindView.class, e); &#125; &#125; // ......... return bindingMap; &#125; 6. 通过binding.brewJava方法将这些注解进行处理。（BindingSet.java）通过JavaFile创建出新的类。而这个新生成的className+_ViewBinding“”类，我们可以在ButterKnife.bind时候获取到它，然后就通过这个类里的方法，实现我们控件和监听方法的绑定了。1234567 JavaFile brewJava(int sdk, boolean debuggable) &#123; TypeSpec bindingConfiguration = createType(sdk, debuggable); //采用了JavaPoet，一个非常强大的代码生成工具。根据我们的注解内容，通过TypeSpec类和MethodSpec类构造出对应的方法，然后根据之前创建BindingSet抽象类时候创建的新类名。 return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration) .addFileComment(&quot;Generated code from Butter Knife. Do not modify!&quot;) .build();&#125; 三、总结 使用编译时注解，在编译时期自动生成Unbinder（APT），这个对象自动生成了我们需要的动画、监听事件等等。 在我们的Activity中使用Bind进行绑定，我们就执行了自动生成的代码。而且返回一个Unbinder。 ButterKnife不能将控件和方法设置为private或者static，是因为在className_ViewBinder类会直接调用该控件和方法进行赋值。 编译时注解+APT 编译时注解：@Retention(CLASS)。 APT(Annotation Processing Tool)编译时解析技术。]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_适配器模式（十三）]]></title>
    <url>%2F2019%2F04%2F05%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言 &emsp;&emsp;上一节我们讲过迭代器模式，这节我们说说适配器模式。 示例地址&emsp;&emsp;Demo地址 类图 定义&emsp;&emsp; 适配器模式把一个类的接口变换成客户端所期待的另外一种接口，从而使原本接口不匹配而无法在一起工作的两个类能够在一起工作。 使用场景&emsp;&emsp;1. 系统需要使用现有的类，而此类的接口不符合系统的需要，即接口不兼容。&emsp;&emsp;2. 想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。&emsp;&emsp;3. 需要一个统一的输出接口，而输入端的类型不可预知。 适配器模式&emsp;&emsp;我们都知道，去香港旅游需要换上美元。换美元我们去哪换呢。银行，没错银行不仅能够兑换美元，还可以兑换其他的币种。这里银行就是我们设计模式中的适配器。我们看看怎么实现。 类适配模式1. 人民币123456789101112/** * 人民币 * * @author 512573717@qq.com * @created 2018/7/23 下午3:53. */public class MoneyRMB &#123; public void getRMB(int money) &#123; System.out.println(&quot;我是&quot; + money + &quot;人民币！！！&quot;); &#125;&#125; 2. 美元123456789/** * 美元 * * @author 512573717@qq.com * @created 2018/7/23 下午3:57. */public interface IMoneyDollar &#123; double getDollar(int money);&#125; 3. 类适配器(美元转换人民币的适配器)12345678910111213/** * 美元转换人民币的适配器 * * @author 512573717@qq.com * @created 2018/7/23 下午4:01. */public class MoneyAdapter extends MoneyRMB implements IMoneyDollar &#123; @Override public double getDollar(int money) &#123; System.out.println(&quot;人民币转换美元&quot;); return money / 6.8; &#125;&#125; 4. Client12345//类适配器System.out.println(&quot;老王去银行兑换美元&quot;);MoneyAdapter adapter = new MoneyAdapter();double result=adapter.getDollar(100);System.out.println(&quot;兑换了&quot;+result+&quot;$&quot;); 对象适配器1. 对象适配器（美元转换人民币的适配器）123456789101112131415161718192021222324/** * 美元转换人民币的适配器 * * @author 512573717@qq.com * @created 2018/7/23 下午5:07. */public class MoneyAdapter implements IMoneyDollar &#123; private MoneyRMB mMoneyRMB; public MoneyAdapter(MoneyRMB moneyRMB) &#123; mMoneyRMB = moneyRMB; &#125; @Override public double getDollar(int money) &#123; System.out.println(&quot;人民币转换美元&quot;); return money / 6.8; &#125; public void getRMB(int money) &#123; mMoneyRMB.getRMB(money); &#125;&#125; 2. Client12345// 对象适配器System.out.println(&quot;老王去银行兑换美元&quot;);MoneyAdapter adapter = new MoneyAdapter(new MoneyRMB());double result = adapter.getDollar(100);System.out.println(&quot;兑换了&quot; + result + &quot;$&quot;); 接口适配器1. 先定义接口1234567891011121314151617181920/** * 接口 * * @author 512573717@qq.com * @created 2018/7/24 下午2:05. */public interface Port &#123; // 网络端口80 void NET(); // Tomcat容器端口8080 void Tomcat(); // Oracle数据库端口1521 void Oracle(); // 文件传输FTP端口21 void FTP();&#125; 2. 接口适配器123456789101112131415161718192021222324252627/** * 接口适配器 * * @author 512573717@qq.com * @created 2018/7/24 下午2:06. */public class PortAdapter implements Port &#123; @Override public void NET() &#123; &#125; @Override public void Tomcat() &#123; &#125; @Override public void Oracle() &#123; &#125; @Override public void FTP() &#123; &#125;&#125; 3.聊天适配器1234567891011121314151617/** * 聊天适配器 * * @author 512573717@qq.com * @created 2018/7/24 下午2:06. */public class ChatAdapter extends PortAdapter &#123; @Override public void NET() &#123; System.out.println(&quot;HTTP ://Hello world!&quot;); &#125; @Override public void FTP() &#123; System.out.println(&quot;FTP:// File upload succeddful!&quot;); &#125;&#125; 4. Client1234//接口适配器Port port = new ChatAdapter();port.FTP();port.NET(); 总结]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_迭代器模事（十二）]]></title>
    <url>%2F2019%2F04%2F04%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E4%BA%8B%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;”革命尚未成功,同志仍需努力”。不知不觉设计模式的写了一半了，今天我们继续，回顾上一节我们讲的责任链模式，这节我们讲一下迭代器模式。 示例地址&emsp;&emsp;Demo地址 类图 定义&emsp;&emsp;提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示。 使用场景&emsp;&emsp;遍历一个容器对象时。 迭代器模式示例&emsp;&emsp;现在的社会，公司收购很正常，例如阿里收购饿了么。很多公司的工资报表做的都是不一样的。打个比方，有的是以数组形式存在的，有的是以集合形式存在的。但最终体现的都一样，张三7月份工资30232。现在我们要将这2种形式合并到一块，我们该怎么做。 1. 我们先定义一个工资的Bean1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * 工资组成bean * * @author 512573717@qq.com * @created 2018/7/20 下午4:08. */public class Salary &#123; private String name; private String pay; private String month; public Salary(String name, String pay, String month) &#123; this.name = name; this.pay = pay; this.month = month; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPay() &#123; return pay; &#125; public void setPay(String pay) &#123; this.pay = pay; &#125; public String getMonth() &#123; return month; &#125; public void setMonth(String month) &#123; this.month = month; &#125; @Override public String toString() &#123; return &quot;Salary&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, pay=&apos;&quot; + pay + &apos;\&apos;&apos; + &quot;, month=&apos;&quot; + month + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; 2. 定义迭代器接口12345678910111213141516/** * 迭代器接口 * * @author 512573717@qq.com * @created 2018/7/20 下午3:02. */public interface Iterator&lt;T&gt; &#123; void first();//将游标指向第一个元素 void next();//将游标指向下一个元素 boolean hasNext();//判断是否有下一个元素 T getCurrentObj();//获取当前对象&#125; 3. 自定义容器接口123456789/** * 自定义容器接口 * @author 512573717@qq.com * @created 2018/7/23 上午10:45. */public interface IManager &#123; Iterator createIterator();&#125; 4. 数组迭代器的实现123456789101112131415161718192021222324252627282930313233343536373839404142/** * 数组迭代器 * * @author 512573717@qq.com * @created 2018/7/20 下午4:17. */public class ArrayIterator implements Iterator &#123; private ArrayManager mArrayManager; private int cursor;//定义一个迭代器游标 public ArrayIterator(ArrayManager arrayManager) &#123; mArrayManager = arrayManager; &#125; @Override public void first() &#123; cursor = 0; &#125; @Override public void next() &#123; if (cursor &lt; mArrayManager.size()) &#123; cursor++; &#125; &#125; @Override public boolean hasNext() &#123; //如果游标&lt;list的大小，则说明还有下一个 if (cursor &lt; mArrayManager.size()) &#123; return true; &#125; return false; &#125; @Override public Object getCurrentObj() &#123; return mArrayManager.get(cursor);//获取当前游标指向的元素 &#125;&#125; 5. 自定义数组12345678910111213141516171819202122232425262728293031/** * 自定义数组 * * @author 512573717@qq.com * @created 2018/7/20 下午4:32. */public class ArrayManager implements IManager &#123; private Salary[] mSalaries = null; public void setSalaries(Salary[] salaries) &#123; mSalaries = salaries; &#125; @Override public Iterator createIterator() &#123; return new ArrayIterator(this); &#125; public Object get(int index) &#123; Object retObj = null; if (index &lt; mSalaries.length) &#123; retObj = mSalaries[index]; &#125; return retObj; &#125; public int size() &#123; return this.mSalaries.length; &#125;&#125; 6. 集合迭代器的实现1234567891011121314151617181920212223242526272829303132333435363738394041/** * 集合的迭代器 * * @author 512573717@qq.com * @created 2018/7/20 下午4:34. */public class CollectionIterator implements Iterator &#123; private CollectionManager aggregate = null; private int cursor;//定义一个迭代器游标 public CollectionIterator(CollectionManager aggregate) &#123; this.aggregate = aggregate; &#125; public void first() &#123; cursor = 0; &#125; @Override public void next() &#123; if (cursor &lt; aggregate.size()) &#123; cursor++; &#125; &#125; @Override public boolean hasNext() &#123; //如果游标&lt;list的大小，则说明还有下一个 if (cursor &lt; aggregate.size()) &#123; return true; &#125; return false; &#125; @Override public Object getCurrentObj() &#123; return aggregate.get(cursor);//获取当前游标指向的元素 &#125;&#125; 7. 自定义集合1234567891011121314151617181920212223242526272829303132/** * 自定义集合类 * * @author 512573717@qq.com * @created 2018/7/20 下午4:37. */public class CollectionManager implements IManager &#123; private List list = new ArrayList(); public void setList(List list) &#123; this.list = list; &#125; @Override public Iterator createIterator() &#123; return new CollectionIterator(this); &#125; public Object get(int index) &#123; Object retObj = null; if (index &lt; this.list.size()) &#123; retObj = this.list.get(index); &#125; return retObj; &#125; public int size() &#123; return this.list.size(); &#125;&#125; 8. Client调用12345678910111213141516171819202122232425262728293031323334System.out.println(&quot;数组迭代器=======&quot;);ArrayManager arrayManager = new ArrayManager();Salary[] salary = new Salary[3];salary[0] = new Salary(&quot;001&quot;, &quot;10K&quot;, &quot;7&quot;);salary[1] = new Salary(&quot;002&quot;, &quot;20K&quot;, &quot;7&quot;);salary[2] = new Salary(&quot;003&quot;, &quot;30K&quot;, &quot;7&quot;);arrayManager.setSalaries(salary);bianLi(arrayManager.createIterator());System.out.println(&quot;集合迭代器=======&quot;);CollectionManager collectionManager = new CollectionManager();ArrayList arrayList = new ArrayList();for (int i = 0; i &lt; 3; i++) &#123; Salary salary1 = new Salary(&quot;00&quot; + (i+1), (i + 1) * 10 + &quot;K&quot;, &quot;7&quot;); arrayList.add(salary1);&#125;collectionManager.setList(arrayList);bianLi(collectionManager.createIterator());/** * 迭代器遍历 * * @param iterator */private void bianLi(Iterator iterator) &#123; iterator.first(); while (iterator.hasNext()) &#123; Object object = iterator.getCurrentObj(); System.out.println(object.toString()); iterator.next(); &#125;&#125; 总结 &emsp;&emsp;上面将两种不同的数据（容器），通过统一的访问，返回数据，而不需要知道内部怎么实现的，这就是迭代器模式。和我们Java JDK中的迭代器是一模一样的有没有。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android_EventBus源码分析]]></title>
    <url>%2F2019%2F04%2F03%2FAndroid-EventBus%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、先看看EventBus的简单使用1. 导入eventbus1compile &apos;org.greenrobot:eventbus:3.0.0&apos; 2. MainActivity1234567891011121314151617181920212223242526272829303132333435363738public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //首先要在你要接受EventBus的界面注册，这一步很重要 EventBus.getDefault().register(this); Button btnCommon = (Button) findViewById(R.id.btn_common); btnCommon.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.btn_common: //点击按钮进入CommonActivity CommonActivity.start(this); break; &#125; &#125; @Override protected void onDestroy() &#123; super.onDestroy(); //在界面销毁的地方要解绑 EventBus.getDefault().unregister(this); &#125; //任意写一个方法，给这个方法一个@Subscribe注解，参数类型可以自定义，但是一定要与你发出的类型相同 @Subscribe public void getEventBus(Integer num) &#123; if (num != null) &#123; //这里拿到事件之后吐司一下 Toast.makeText(this, &quot;num&quot; + num, Toast.LENGTH_SHORT).show(); &#125; &#125;&#125; 3. CommonActivity12345678910111213141516171819202122232425public class CommonActivity extends AppCompatActivity implements View.OnClickListener &#123; public static void start(Context context) &#123; context.startActivity(new Intent(context, CommonActivity.class)); &#125; @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_common); Button button = (Button) findViewById(R.id.btn_send); button.setOnClickListener(this); &#125; @Override public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.btn_send: //点击按钮，发送一个int类型的事件 EventBus.getDefault().post(666); finish(); break; &#125; &#125;&#125; 4. 指定线程执行1234567891011121314151617//CommonActivity 里面发送消息放到子线程new Thread(new Runnable() &#123; @Override public void run() &#123; EventBus.getDefault().post(666); finish(); &#125; &#125;).start(); //MainActivity里面接收事件，只需要指定线程模式即可，即threadMode = ThreadMode.MAIN--&gt;@Subscribe(threadMode = ThreadMode.MAIN)public void getEventBus(Integer num) &#123; if (num != null) &#123; Toast.makeText(this, &quot;num&quot; + num, Toast.LENGTH_SHORT).show(); &#125;&#125; 5. Stick Event（黏性事件）&emsp;&emsp;简单讲，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。&emsp;&emsp;1. 先发布事件1234//点击按钮，跳转到StickActivity并携带参数，参数类型为StringEventBus.getDefault().postSticky(&quot;我是黏性事件&quot;);//开启新的activityStickActivity.start(this); &emsp;&emsp;2. 在订阅事件 12345678910111213@Overrideprotected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_stick); //前面也说了，在任何你要接收事件的地方都要先注册 EventBus.getDefault().register(this);&#125; //同样的，自定义一个方法，加上 @Subscribe，不同的是在后面再加上一句sticky = true告诉EventBus这是一个粘性事件@Subscribe(sticky = true)public void getEventBus(String str) &#123; Toast.makeText(this, str, Toast.LENGTH_SHORT).show();&#125; 二、源码分析（EventBus.java）1. 看看定义的变量1234567891011121314151617181920212223242526// 一看就是单例static volatile EventBus defaultInstance;// 建造者模式private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();// 类型缓存的集合private static final Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = new HashMap&lt;&gt;();// key 是 Event 参数的类 例如String// value 存放的是 Subscription 的集合列表// Subscription 包含两个属性，一个是 subscriber 订阅者（反射执行对象），一个是 SubscriberMethod 注解方法的所有属性参数值// 发送消息会遍历此集合private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;// key 是所有的订阅者// value 是所有订阅者里面方法的参数的class 例如String// 主要用于移除订阅者private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;// 发送粘性事件会遍历此集合private final Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;// 空间换时间 每个线程都有自己的副本private final ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = new ThreadLocal&lt;PostingThreadState&gt;() &#123; @Override protected PostingThreadState initialValue() &#123; return new PostingThreadState(); &#125;&#125;; 2. 看看注册方法123456789101112public void register(Object subscriber) &#123; Class&lt;?&gt; subscriberClass = subscriber.getClass(); // 拿到类的所以的方法（通过反射方法，然后拿到方法上的注解） // findSubscriberMethods()去解析注册者对象的所有方法，并且找出带有注解 Subscribe注解的的方法，然后通过Annotation解析所有细节参数（threadMode，priority，sticky，eventType，method），把这些参数封装成一个 SubscriberMethod，添加到集合返回。 List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass); synchronized (this) &#123; for (SubscriberMethod subscriberMethod : subscriberMethods) &#123; // 将activity 和注解的方法一一绑定 subscribe(subscriber, subscriberMethod); &#125; &#125;&#125; 3. 看看反射方法的实现12345678910111213141516171819private void findUsingReflectionInSingleClass(FindState findState) &#123; for (Method method : methods) &#123; int modifiers = method.getModifiers(); if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) &#123; Class&lt;?&gt;[] parameterTypes = method.getParameterTypes(); if (parameterTypes.length == 1) &#123; Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class); if (subscribeAnnotation != null) &#123; Class&lt;?&gt; eventType = parameterTypes[0]; if (findState.checkAdd(method, eventType)) &#123; ThreadMode threadMode = subscribeAnnotation.threadMode(); // 讲方法上的注解 封装成一个对象 ,存放到集合里面List&lt;SubscriberMethod&gt; findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode, subscribeAnnotation.priority(), subscribeAnnotation.sticky())); &#125; &#125; &#125;&#125; 4. 在看看怎么绑定的// subscriptionsByEventType// 第一步 讲acitivty 和方法封装成一个对象// 第二步 讲方法类型 作为key 不同的activity和方法做一个对象放到一个集合里面// 第三步 按照当前方法的优先级进行集合的存放 // typesBySubscriber// 将Actvitity作为key eventType存放到一个集合，然后存放到typesBySubscriber 123456789101112131415161718192021222324252627282930313233// Must be called in synchronized blockprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123; Class&lt;?&gt; eventType = subscriberMethod.eventType; Subscription newSubscription = new Subscription(subscriber, subscriberMethod); CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions == null) &#123; subscriptions = new CopyOnWriteArrayList&lt;&gt;(); subscriptionsByEventType.put(eventType, subscriptions); &#125; else &#123; if (subscriptions.contains(newSubscription)) &#123; throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot; + eventType); &#125; &#125; int size = subscriptions.size(); for (int i = 0; i &lt;= size; i++) &#123; // 存放activity +type 按照优先级排序 if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123; subscriptions.add(i, newSubscription); break; &#125; &#125; List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber); if (subscribedEvents == null) &#123; subscribedEvents = new ArrayList&lt;&gt;(); typesBySubscriber.put(subscriber, subscribedEvents); &#125; subscribedEvents.add(eventType); &#125; 5. 简单的例子（subscriptionsByEventType）&emsp;&emsp;将Event的参数类型作为Key,Subscription的集合列表作为Value。然后在post发送内容的时候依据参数的类型去寻找对应的注册者 ，执行对象的方法。结构如下(伪代码)。 1234567891011121314// String类型的subscriberList&lt;Object&gt; mList=new ArrayList&lt;&gt;();mList.add(new Subscription(MainActivity,test1(String)));mList.add(new Subscription(MainActivity,test2(String)));mList.add(new Subscription(MainActivity2,test2(String)));// int类型的subscriberList&lt;Object&gt; mList1=new ArrayList&lt;&gt;();mList1.add(new Subscription(MainActivity,test3(int)));mList1.add(new Subscription(MainActivity2,test1(int)));Map&lt;String,List&gt; map=new HashMap&lt;&gt;();map.put(&quot;int&quot;,mList1);map.put(&quot;String&quot;,mList); 6. 简单的例子 (typesBySubscriber)&emsp;&emsp;将注册者作为Key,参数类型的集合作为Value。这个参数类型的集合针对的是当前注册者中的。 结构如下(伪代码) 1234567List&lt;Object&gt; mList=new ArrayList&lt;&gt;();mList.add(&quot;String&quot;);mList.add(&quot;int&quot;);Map&lt;String,List&gt; map=new HashMap&lt;&gt;();map.put(&quot;MainActivity&quot;,mList); 7. post()核心的发送代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106public void post(Object event) &#123; // currentPostingThreadState 是一个 ThreadLocal， // 他的特点是获取当前线程一份独有的变量数据，不受其他线程影响。 PostingThreadState postingState = currentPostingThreadState.get(); // postingState 就是获取到的线程独有的变量数据 List&lt;Object&gt; eventQueue = postingState.eventQueue; // 把 post 的事件添加到事件队列 eventQueue.add(event); // 如果没有处在事件发布状态，那么开始发送事件并一直保持发布状态 if (!postingState.isPosting) &#123; // 是否是主线程 postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper(); // isPosting = true postingState.isPosting = true; if (postingState.canceled) &#123; throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;); &#125; try &#123; while (!eventQueue.isEmpty()) &#123; postSingleEvent(eventQueue.remove(0), postingState); &#125; &#125; finally &#123; postingState.isPosting = false; postingState.isMainThread = false; &#125; &#125;&#125;private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123; Class&lt;?&gt; eventClass = event.getClass(); boolean subscriptionFound = false; // 如果支持事件继承，默认为支持 if (eventInheritance) &#123; List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass); int countTypes = eventTypes.size(); for (int h = 0; h &lt; countTypes; h++) &#123; Class&lt;?&gt; clazz = eventTypes.get(h); // 依次向 eventClass 的父类或接口的订阅方法发送事件 // 只要有一个事件发送成功，返回 true ，那么 subscriptionFound 就为 true subscriptionFound |= postSingleEventForEventType(event, postingState, clazz); &#125; &#125; else &#123; subscriptionFound = postSingleEventForEventType(event, postingState, eventClass); &#125; &#125;private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) &#123; CopyOnWriteArrayList&lt;Subscription&gt; subscriptions; synchronized (this) &#123; // 得到Subscription 列表 subscriptions = subscriptionsByEventType.get(eventClass); &#125; if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) &#123; for (Subscription subscription : subscriptions) &#123; postingState.event = event; postingState.subscription = subscription; boolean aborted = false; try &#123; postToSubscription(subscription, event, postingState.isMainThread); aborted = postingState.canceled; &#125; finally &#123; postingState.event = null; postingState.subscription = null; postingState.canceled = false; &#125; if (aborted) &#123; break; &#125; &#125; return true; &#125; return false;&#125;private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123; // 根据不同的线程模式执行对应 switch (subscription.subscriberMethod.threadMode) &#123; case POSTING: invokeSubscriber(subscription, event); break; case MAIN: if (isMainThread) &#123; invokeSubscriber(subscription, event); &#125; else &#123; mainThreadPoster.enqueue(subscription, event); &#125; break; case BACKGROUND: if (isMainThread) &#123; backgroundPoster.enqueue(subscription, event); &#125; else &#123; invokeSubscriber(subscription, event); &#125; break; case ASYNC: asyncPoster.enqueue(subscription, event); break; default: throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode); &#125;&#125; 8. unregister()，在unregister()方法中。调用typesBySubscriber，先通过注册者（MainActivity）找到对应的参数类型集合。然后遍历参数类型集合，拿着参数类型去subscriptionsByEventType找对应的Subscriber。如果Subscriber的注册者是参数类型的注册者，直接移除123456789101112131415/** Unregisters the given subscriber from all event classes. */public synchronized void unregister(Object subscriber) &#123; // 获取订阅对象的所有订阅事件类列表 List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber); if (subscribedTypes != null) &#123; for (Class&lt;?&gt; eventType : subscribedTypes) &#123; // 将订阅者的订阅信息移除 unsubscribeByEventType(subscriber, eventType); &#125; // 将订阅者从列表中移除 typesBySubscriber.remove(subscriber); &#125; else &#123; Log.w(TAG, &quot;Subscriber to unregister was not registered before: &quot; + subscriber.getClass()); &#125;&#125; 9. 看看移除的伪代码1234567891011121314//第一步 先查找typesBySubscriber Map 得到一个集合//传递 MainActivity，查找的是一个list集合 有2个参数类型//mList.add(&quot;String&quot;);//mList.add(&quot;int&quot;);//第二步 遍历集合， 拿着类型去subscriptionsByEventType查找// String 有3个 // mList.add(new Subscription(MainActivity, test1(String)));// mList.add(new Subscription(MainActivity, test2(String)));//mList.add(new Subscription(MainActivity2, test2(String)));//第三步//有2个与MainActivity一样的都移除。剩下//mList.add(new Subscription(MainActivity2, test2(String))); 三、手写EventBus1. 主要手写EventBus.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165/** * @author 512573717@qq.com * @created 2018/8/26 上午1:21. */public class EventBus &#123; // subscriptionsByEventType 这个集合存放的是？ // key 是 Event 参数的类 例如MainActivity里面的 test（String） String // value 存放的是 Subscription 的集合列表 // Subscription 包含两个属性，一个是 subscriber 订阅者（反射执行对象），一个是 SubscriberMethod 注解方法的所有属性参数值 private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType; // typesBySubscriber 这个集合存放的是？ // key 是所有的订阅者 MainActivity // value 是所有订阅者里面方法的参数的class 例如MainActivity里面的 test（String） String private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber; private EventBus() &#123; typesBySubscriber = new HashMap&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt;(); subscriptionsByEventType = new HashMap&lt;&gt;(); &#125; static volatile EventBus defaultInstance; /** * Convenience singleton for apps using a process-wide EventBus instance. */ public static EventBus getDefault() &#123; if (defaultInstance == null) &#123; synchronized (EventBus.class) &#123; if (defaultInstance == null) &#123; defaultInstance = new EventBus(); &#125; &#125; &#125; return defaultInstance; &#125; public void register(Object object) &#123; // 1. 解析所有方法封装成 SubscriberMethod 的集合 List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;(); Class&lt;?&gt; objClass = object.getClass(); Method[] methods = objClass.getDeclaredMethods(); for (Method method : methods) &#123; //解析所有带有注解的方法 Subscribe subscribe = method.getAnnotation(Subscribe.class); if (subscribe != null) &#123; // 所有的Subscribe属性 解析出来 Class&lt;?&gt;[] parameterTypes = method.getParameterTypes(); SubscriberMethod subscriberMethod = new SubscriberMethod( method, parameterTypes[0], subscribe.threadMode(), subscribe.priority(), subscribe.sticky()); subscriberMethods.add(subscriberMethod); &#125; &#125; // 2. 按照规则存放到 subscriptionsByEventType 里面去 for (SubscriberMethod subscriberMethod : subscriberMethods) &#123; subscriber(object, subscriberMethod); &#125; &#125; // 2. 按照规则存放到 subscriptionsByEventType 里面去 private void subscriber(Object object, SubscriberMethod subscriberMethod) &#123; Class&lt;?&gt; eventType = subscriberMethod.eventType; // 随处能找到，我这个代码 CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions == null) &#123; subscriptions = new CopyOnWriteArrayList&lt;&gt;(); subscriptionsByEventType.put(eventType, subscriptions); &#125; // 判断优先级 （不写） Subscription subscription = new Subscription(object, subscriberMethod); subscriptions.add(subscription); // typesBySubscriber 要弄好是为了方便移除 List&lt;Class&lt;?&gt;&gt; eventTypes = typesBySubscriber.get(object); if (eventTypes == null) &#123; eventTypes = new ArrayList&lt;&gt;(); typesBySubscriber.put(object, eventTypes); &#125; if (!eventTypes.contains(eventType)) &#123; eventTypes.add(eventType); &#125; &#125; public void unregister(Object object) &#123; List&lt;Class&lt;?&gt;&gt; eventTypes = typesBySubscriber.get(object); if (eventTypes != null) &#123; for (Class&lt;?&gt; eventType : eventTypes) &#123; removeObject(eventType, object); &#125; &#125; &#125; private void removeObject(Class&lt;?&gt; eventType, Object object) &#123; // 获取事件类的所有订阅信息列表，将订阅信息从订阅信息集合中移除，同时将订阅信息中的active属性置为FALSE List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions != null) &#123; int size = subscriptions.size(); for (int i = 0; i &lt; size; i++) &#123; Subscription subscription = subscriptions.get(i); if (subscription.subscriber == object) &#123; // 将订阅信息从集合中移除 subscriptions.remove(i); i--; size--; &#125; &#125; &#125; &#125; public void post(Object event) &#123; // 遍历 subscriptionsByEventType，找到符合的方法调用方法的 method.invoke() 执行。要注意线程切换 Class&lt;?&gt; eventType = event.getClass(); // 找到符合的方法调用方法的 method.invoke() 执行 CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions != null) &#123; for (Subscription subscription : subscriptions) &#123; executeMethod(subscription, event); &#125; &#125; &#125; private void executeMethod(final Subscription subscription, final Object event) &#123; ThreadMode threadMode = subscription.subscriberMethod.threadMode; boolean isMainThread = Looper.getMainLooper() == Looper.myLooper(); switch (threadMode) &#123; case POSTING: invokeMethod(subscription, event); break; case MAIN: if (isMainThread) &#123; invokeMethod(subscription, event); &#125; else &#123; // 行不行，不行？行？ Handler handler = new Handler(Looper.getMainLooper()); handler.post(new Runnable() &#123; @Override public void run() &#123; invokeMethod(subscription, event); &#125; &#125;); &#125; break; case ASYNC: AsyncPoster.enqueue(subscription, event); break; case BACKGROUND: if (!isMainThread) &#123; invokeMethod(subscription, event); &#125; else &#123; AsyncPoster.enqueue(subscription, event); &#125; break; &#125; &#125; private void invokeMethod(Subscription subscription, Object event) &#123; try &#123; subscription.subscriberMethod.method.invoke(subscription.subscriber, event); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 2. 调用（MainActivity）1234567891011121314151617181920212223242526272829303132333435363738@Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 注册，思考为什么要注册？ EventBus.getDefault().register(this); // 进入测试界面 mTv = (TextView) findViewById(R.id.test_tv); mTv.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Intent intent = new Intent(MainActivity.this, TestActivity.class); startActivity(intent); &#125; &#125;); &#125; /** * threadMode 执行的线程方式 * priority 执行的优先级 * sticky 粘性事件 */ @Subscribe(threadMode = ThreadMode.MAIN, priority = 50, sticky = true) public void test1(String msg) &#123; // 如果有一个地方用 EventBus 发送一个 String 对象，那么这个方法就会被执行 Log.e(&quot;TAG&quot;, &quot;msg1 = &quot; + msg); mTv.setText(msg); &#125; @Override protected void onDestroy() &#123; // 解绑，思考为什么要解绑？ EventBus.getDefault().unregister(this); super.onDestroy(); &#125; 3. 调用（TestActivity）1234567891011@Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.test_tv).setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; EventBus.getDefault().post(&quot;text&quot;); &#125; &#125;); &#125; 4. 执行结果129731-29731/demo.dhcc.com.eventbusdemo E/TAG: msg1 = text 4. 总结&emsp;&emsp;主要的是使用反射，存储app中所有注册过的activity或者Fragment，在发生消息的时候去遍历这个map执行响应的方法。]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android_AsyncTask源码分析]]></title>
    <url>%2F2019%2F04%2F02%2FAndroid-AsyncTask%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[1. 基本用法12345class DownloadTask extends AsyncTask&lt;Void, Integer, Boolean&gt; &#123; …… &#125; new DownloadTask().execute(); 第一个 对应doInBackground 指定需要传入的参数， 第二个 对应onProgressUpdate(Integer… values)， 第三个 对应onPostExecute(Boolean result)。 2. 主要使用 SerialExecutor线程池，添加任务到队列。 123private static class SerialExecutor implements Executor &#123; &#125; ThreadPoolExecutor线程池执行任务。 12345678910// We want at least 2 threads and at most 4 threads in the core pool,// preferring to have 1 less than the CPU count to avoid saturating// the CPU with background workprivate static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;private static final int KEEP_ALIVE_SECONDS = 30;// 是一个阻塞的线程安全的队列，底层采用链表实现。该类主要提供了两个方法put()和take()，前者将一个对象放到队列中，如果队列已经满了，就等待直到有空闲节点；后者从head取一个对象，如果没有对象，就等待直到有可取的对象。private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128); Handler用于处理执行任务之后切换到主线程。 3. 执行流程 开始执行 1234@MainThreadpublic final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123; return executeOnExecutor(sDefaultExecutor, params);&#125; executeOnExecutor方法里面主要做了以下操作 123456public final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec, Params... params) &#123; onPreExecute(); mWorker.mParams = params; exec.execute(mFuture);&#125; 看看sDefaultExecutor这个是什么（线程池） 12345678910111213141516171819202122232425262728private static class SerialExecutor implements Executor &#123; //ArrayDeque 可以作为栈来使用，效率要高于 Stack；ArrayDeque 也可以作为队列来使用，效率相较于基于双向链表的 LinkedList 也要更好一些。注意，ArrayDeque 不支持为 null 的元素。先进先出 不安全。 final ArrayDeque&lt;Runnable&gt; mTasks = new ArrayDeque&lt;Runnable&gt;(); Runnable mActive; public synchronized void execute(final Runnable r) &#123; // 将任务添加到队列 mTasks.offer(new Runnable() &#123; public void run() &#123; try &#123; r.run(); &#125; finally &#123; scheduleNext(); &#125; &#125; &#125;); if (mActive == null) &#123; scheduleNext(); &#125; &#125; // 开启线程池 执行 protected synchronized void scheduleNext() &#123; if ((mActive = mTasks.poll()) != null) &#123; THREAD_POOL_EXECUTOR.execute(mActive); &#125; &#125;&#125; 再来看看FutureTask（ implements RunnableFuture ————&gt; extends Runnable, Future） 123456789101112131415mFuture = new FutureTask&lt;Result&gt;(mWorker) &#123; @Override protected void done() &#123; try &#123; postResultIfNotInvoked(get()); &#125; catch (InterruptedException e) &#123; android.util.Log.w(LOG_TAG, e); &#125; catch (ExecutionException e) &#123; throw new RuntimeException(&quot;An error occurred while executing doInBackground()&quot;, e.getCause()); &#125; catch (CancellationException e) &#123; postResultIfNotInvoked(null); &#125; &#125;&#125;; FutureTask是Runnable的子类，那我们来看看他的run方法 123456789101112131415161718192021public void run() &#123; // 主要看这里 其中this.callable = callable;; // runnable是我们传递的mWorker Callable&lt;V&gt; c = callable; if (c != null &amp;&amp; state == NEW) &#123; V result; boolean ran; try &#123; result = c.call(); ran = true; &#125; catch (Throwable ex) &#123; result = null; ran = false; setException(ex); &#125; if (ran) set(result); &#125; &#125; 我们再来看看mWorker，调用call（）。 123456789101112131415161718mWorker = new WorkerRunnable&lt;Params, Result&gt;() &#123; public Result call() throws Exception &#123; mTaskInvoked.set(true); Result result = null; try &#123; Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND); //noinspection unchecked result = doInBackground(mParams); Binder.flushPendingCommands(); &#125; catch (Throwable tr) &#123; mCancelled.set(true); throw tr; &#125; finally &#123; postResult(result); &#125; return result; &#125; &#125;; 调用doInBackground,最终调用postResult。切换到主线程，更新结果。 1234567private Result postResult(Result result) &#123; @SuppressWarnings(&quot;unchecked&quot;) Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT, new AsyncTaskResult&lt;Result&gt;(this, result)); message.sendToTarget(); return result;&#125; 看看mHandler 1234567891011121314151617181920private static class InternalHandler extends Handler &#123; public InternalHandler(Looper looper) &#123; super(looper); &#125; @SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;RawUseOfParameterizedType&quot;&#125;) @Override public void handleMessage(Message msg) &#123; AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj; switch (msg.what) &#123; case MESSAGE_POST_RESULT: // There is only one result result.mTask.finish(result.mData[0]); break; case MESSAGE_POST_PROGRESS: result.mTask.onProgressUpdate(result.mData); break; &#125; &#125;&#125; 看看最后的finish12345678private void finish(Result result) &#123; if (isCancelled()) &#123; onCancelled(result); &#125; else &#123; onPostExecute(result); &#125; mStatus = Status.FINISHED;&#125; 4. 注意事项 SerialExecutor是使用ArrayDeque这个队列来管理Runnable对象的，调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，调用scheduleNext()方法。在这个方法中会从队列的头部取值。每次当一个任务执行完毕后，下一个任务才会得到执行，SerialExecutor模仿的是单一线程池的效果，如果我们快速地启动了很多任务，同一时刻只会有一个线程正在执行，其余的均处于等待状态。 在Android 3.0之前是并没有SerialExecutor这个类的，那个时候是直接在AsyncTask中构建了一个sExecutor常量。 规定同一时刻能够运行的线程数为5个，线程池总大小为128。也就是说当我们启动了10个任务时，只有5个任务能够立刻执行，另外的5个任务则需要等待，当有一个任务执行完毕后，第6个任务才会启动，以此类推。而线程池中最大能存放的线程数是128个，当我们尝试去添加第129个任务时，程序就会崩溃。 在3.0版本中AsyncTask的改动还是挺大的，在3.0之前的AsyncTask可以同时有5个任务在执行，而3.0之后的AsyncTask同时只能有1个任务在执行。为什么升级之后可以同时执行的任务数反而变少了呢？这是因为更新后的AsyncTask已变得更加灵活，如果不想使用默认的线程池，还可以自由地进行配置 创建线程池以及初始化 123Executor exec = new ThreadPoolExecutor(15, 200, 10, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());new DownloadTask().executeOnExecutor(exec);]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_责任链模式（十一）]]></title>
    <url>%2F2019%2F04%2F01%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;上一章我们将了代理模式，这一节我们说说责任链模式，目前的这几种模式都是比较简单的。 示例地址 &emsp;&emsp;Demo地址 类图 定义&emsp;&emsp;使多个对象都有机会处理请求,从而避免了请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，只到有对象处理它为止。 责任链模式使用场景&emsp;&emsp;1. 多个对象可以处理同一请求，但具体由那个对象处理则在运行时动态决定。&emsp;&emsp;2. 在请求处理者不明确的情况下向多个对象中的一个提交。&emsp;&emsp;3. 需要动态指定一组对象处理请求。 责任链模式示例&emsp;&emsp;在古代，小百姓打官司都是先到知县，不合理到知府，然后巡抚。 1. 先定义一个当官的接口，他们有权利处理老百姓的告状1234567891011121314151617181920/** * 有权利的人 * * @author 512573717@qq.com * @created 2018/7/19 下午4:11. */public abstract class DangGuan &#123; private DangGuan nextDangGuan; public DangGuan getNextDangGuan() &#123; return nextDangGuan; &#125; public void setNextDangGuan(DangGuan nextDangGuan) &#123; this.nextDangGuan = nextDangGuan; &#125; //案情 abstract void anQing(String desc);&#125; 2. 知县1234567891011121314151617/** * 知县 * * @author 512573717@qq.com * @created 2018/7/19 下午4:39. */public class CountyGuan extends DangGuan &#123; @Override void anQing(String desc) &#123; if (desc.equals(&quot;知县&quot;)) &#123; System.out.println(&quot;知县处理了此案情&quot;); &#125; else &#123; System.out.println(&quot;知县：这案情我处理不了，我先上报&quot;); getNextDangGuan().anQing(desc); &#125; &#125;&#125; 3. 知府1234567891011121314151617/** * 知府 * * @author 512573717@qq.com * @created 2018/7/19 下午4:43. */public class CityGuan extends DangGuan &#123; @Override void anQing(String desc) &#123; if (desc.equals(&quot;知府&quot;)) &#123; System.out.println(&quot;知府处理了此案情&quot;); &#125; else &#123; System.out.println(&quot;知府：这案情我处理不了，我先上报&quot;); getNextDangGuan().anQing(desc); &#125; &#125;&#125; 4. 巡抚12345678910111213141516/** * 巡抚 * * @author 512573717@qq.com * @created 2018/7/19 下午4:44. */public class ProvinceGuan extends DangGuan &#123; @Override void anQing(String desc) &#123; if (desc.equals(&quot;巡抚&quot;)) &#123; System.out.println(&quot;巡抚处理了此案情&quot;); &#125; else &#123; getNextDangGuan().anQing(desc); &#125; &#125;&#125; 5. 老百姓告状123456789CountyGuan countyGuan = new CountyGuan();CityGuan cityGuan = new CityGuan();ProvinceGuan provinceGuan = new ProvinceGuan();countyGuan.setNextDangGuan(cityGuan);cityGuan.setNextDangGuan(provinceGuan);System.out.println(&quot;老百姓开始告状了。&quot;);countyGuan.anQing(&quot;巡抚&quot;); 总结&emsp;&emsp;职责链的模式链的组成：&emsp;&emsp;第一步需要在处理者对象类中定义后继处理者对象，将这部分代码抽象到抽象类中实现，降低了代码重复性。&emsp;&emsp;第二步就是在处理者对象类中的处理方法中如果当前处理者对象无法处理，就将其传递到后继对象去处理。&emsp;&emsp;第三步就是在测试类中将这些处理者类的实例串联成链。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_代理模式（十）]]></title>
    <url>%2F2019%2F03%2F31%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言 &emsp;&emsp;上一节我们讲了观察者模式，这回咱们说说代理模式。 示例地址 &emsp;&emsp;Demo 类图 代理模式的定义 &emsp;&emsp;为其他对象提供一种代理以控制对这个对象的访问。 代理模式的使用场景 &emsp;&emsp;当无法或不想直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。 代理模式的示例 &emsp;&emsp;代理模式挺简单的，就跟单例模式一样简单。我们日常冲话费都是支付宝或者微信。这里面微信或者支付宝就是代理。 静态代理1. 充值接口12345678910/** * 话费充值接口 * * @author 512573717@qq.com * @created 2018/7/19 上午10:58. */public interface IHuaFei &#123; void recharge ();&#125; 2. 充值实现123456789101112/** * 充值实现 * * @author 512573717@qq.com * @created 2018/7/19 上午11:12. */public class Recharge implements IHuaFei &#123; @Override public void recharge() &#123; System.out.println(&quot;充值100元话费&quot;); &#125;&#125; 3. 支付宝代理123456789101112131415161718/** * 支付宝代缴话费 * * @author 512573717@qq.com * @created 2018/7/19 上午11:12. */public class ZhiFuBaoProxy implements IHuaFei &#123; private Recharge mRecharge; public ZhiFuBaoProxy(Recharge recharge) &#123; mRecharge = recharge; &#125; @Override public void recharge() &#123; mRecharge.recharge(); &#125;&#125; 4. Client调用123Recharge mRecharge = new Recharge();ZhiFuBaoProxy mZhiFuBao = new ZhiFuBaoProxy(mRecharge);mZhiFuBao.recharge(); 动态代理1. 动态代理类123456789101112131415161718/** * 动态代理 * * @author 512573717@qq.com * @created 2018/7/19 上午11:33. */public class DynamicProxy implements InvocationHandler &#123; private Object object; public DynamicProxy(Object object) &#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; Object result = method.invoke(object, args); return result; &#125;&#125; 2. Client12345IHuaFei mIHuaFei = new Recharge();DynamicProxy proxy = new DynamicProxy(mIHuaFei);ClassLoader classLoader = mIHuaFei.getClass().getClassLoader();IHuaFei huaFei = (IHuaFei) Proxy.newProxyInstance(classLoader, new Class[]&#123;IHuaFei.class&#125;, proxy);huaFei.recharge(); 总结&emsp;&emsp;代理模式为的是对被代理对象提供访问控制，客户端关心的实际上还是被代理对象所具有的功能。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_观察者模式（九）]]></title>
    <url>%2F2019%2F03%2F29%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言 &emsp;&emsp;开弓没有回头箭，我们还的继续，回顾上一节我们讲的建造者模式，这节我们说说观察者模式。 示例地址&emsp;&emsp;Demo 类图 定义 &emsp;&emsp;定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。 使用场景 &emsp;&emsp; 1.关联行为场景，需要注意的是，关联行为是可拆分的，而不是”组合”关系；&emsp;&emsp; 2.事件多级触发场景；&emsp;&emsp; 3.跨系统的消息交换场景，例如消息队列、事件总线的处理机制。 观察者模式中的两个角色 &emsp;&emsp;Observer: 观察者角色。 &emsp;&emsp;Observable：被观察者角色。 观察者模式示例 &emsp;&emsp;举个栗子，我们在上班的时候，每个公司或者每个楼都有烟感设备，一旦抽烟或者楼道发生火灾，第一立刻鸣警，第二，装备里面的水银自断，立刻喷水。这个例子中，观察者是烟感设备，被观察者是烟或者火。 1. 定义观察者接口12345678910/** * 观察者接口 * * @author 512573717@qq.com * @created 2018/7/18 上午10:38. */public interface IObserver &#123; //更新消息 void updateMessage(String message);&#125; 2. 观察者的实现（烟感应器）12345678910111213/** * 烟感应器 * * @author 512573717@qq.com * @created 2018/7/18 上午11:05. */public class YanObserver implements IObserver &#123; @Override public void updateMessage(String message) &#123; System.out.println(message + &quot;烟感应器 感应到了火情，立刻鸣警&quot;); &#125;&#125; 3. 观察者的实现（水银感应器）123456789101112/** * 水银感应器 * * @author 512573717@qq.com * @created 2018/7/18 上午11:08. */public class ShuiYinObserver implements IObserver &#123; @Override public void updateMessage(String message) &#123; System.out.println(message + &quot;水银感应器 感应到了火情，立刻自毁水银，开始喷水&quot;); &#125;&#125; 4. 被观察者接口12345678910111213141516/** * 被观察者接口 * * @author 512573717@qq.com * @created 2018/7/18 上午10:39. */public interface IObservable &#123; //添加 void addObserver(IObserver observer); //移除 void removeObserver(IObserver observer); //通知 void noticeObserver(String messgae);&#125; 5. 被观察者实现（着火）123456789101112131415161718192021222324252627282930313233343536/** * 发生火情 * * @author 512573717@qq.com * @created 2018/7/18 上午11:23. */public class ZhaoHuo implements IObservable &#123; private List&lt;IObserver&gt; mIObservers = new ArrayList&lt;&gt;(); @Override public void addObserver(IObserver observer) &#123; if (!mIObservers.contains(observer)) &#123; mIObservers.add(observer); &#125; &#125; @Override public void removeObserver(IObserver observer) &#123; if (mIObservers.contains(observer)) &#123; mIObservers.remove(observer); &#125; &#125; @Override public void noticeObserver(String messgae) &#123; for (IObserver observer : mIObservers) &#123; observer.updateMessage(messgae); &#125; &#125; public void change(String messgae) &#123; System.out.println(&quot;推模型---------&quot;); noticeObserver(messgae); &#125;&#125; 6. Client调用123456789101112ZhaoHuo zhaoHuo = new ZhaoHuo();//烟感设备IObserver yanObserver = new YanObserver();IObserver shuiYinObserver = new ShuiYinObserver();//添加观察者zhaoHuo.addObserver(yanObserver);zhaoHuo.addObserver(shuiYinObserver);//通知zhaoHuo.change(&quot;着火了 ！&quot;); 推模型和拉模型概念&emsp;&emsp;在观察者模式中，又分为推模型和拉模型两种方式。 1. 推模型&emsp;&emsp;主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。 2. 拉模型&emsp;&emsp;主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。 推模型和拉模型二者的比较 &emsp;&emsp;1、推模型是假定目标对象知道观察者需要的数据；拉模型不知道observer需要什么数据，因此把自身传给observer，由观察者来取值 &emsp;&emsp;2、推模型使observer对象难以复用，拉模型传递的是目标对象本身，满足各种需要 拉模型的示例&emsp;&emsp;上面那个烟感设备就是典型的推模型，下面我们来看看拉模型的实现 1. 观察者接口（这里主要讲参数变成被观察者本身了）12345678910/** * 观察者接口 * * @author 512573717@qq.com * @created 2018/7/18 上午10:38. */public interface IObserver &#123; //更新消息 void updateMessage(IObservable observable);&#125; 2.烟感应器123456789101112131415/** * 烟感应器 * * @author 512573717@qq.com * @created 2018/7/18 上午11:05. */public class YanObserver implements IObserver &#123; @Override public void updateMessage(IObservable observable) &#123; String message=((ZhaoHuo)observable).getMessage(); System.out.println(message + &quot;烟感应器 感应到了火情，立刻鸣警&quot;); &#125;&#125; 3. 水银感应器123456789101112131415/** * 水银感应器 * * @author 512573717@qq.com * @created 2018/7/18 上午11:08. */public class ShuiYinObserver implements IObserver &#123; @Override public void updateMessage(IObservable observable) &#123; String message=((ZhaoHuo)observable).getMessage(); System.out.println(message + &quot;水银感应器 感应到了火情，立刻自毁水银，开始喷水&quot;); &#125;&#125; 4. 被观察者接口（通知中不传递任何参数）12345678910111213141516/** * 被观察者接口 * * @author 512573717@qq.com * @created 2018/7/18 上午10:39. */public interface IObservable &#123; //添加 void addObserver(IObserver observer); //移除 void removeObserver(IObserver observer); //通知 void noticeObserver();&#125; 5. 发生火情（自身作为参数传递）12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 发生火情 * * @author 512573717@qq.com * @created 2018/7/18 上午11:23. */public class ZhaoHuo implements IObservable &#123; private String message; private List&lt;IObserver&gt; mIObservers = new ArrayList&lt;&gt;(); @Override public void addObserver(IObserver observer) &#123; if (!mIObservers.contains(observer)) &#123; mIObservers.add(observer); &#125; &#125; @Override public void removeObserver(IObserver observer) &#123; if (mIObservers.contains(observer)) &#123; mIObservers.remove(observer); &#125; &#125; @Override public void noticeObserver() &#123; for (IObserver observer : mIObservers) &#123; // 将自身作为参数传递 observer.updateMessage(this); &#125; &#125; public void change(String message) &#123; message = message; System.out.println(&quot; 拉模型：&quot; + message); //状态发生改变，通知各个观察者 this.noticeObserver(); &#125; public String getMessage() &#123; return message; &#125;&#125; 6. Client123456789101112ZhaoHuo zhaoHuo = new ZhaoHuo(); //烟感设备 IObserver yanObserver = new YanObserver(); IObserver shuiYinObserver = new ShuiYinObserver(); //添加观察者 zhaoHuo.addObserver(yanObserver); zhaoHuo.addObserver(shuiYinObserver); //通知 zhaoHuo.change(&quot;着火了 ！&quot;); 总结&emsp;&emsp;观察者模式定义的是一对多的依赖关系，一个被观察者可以拥有多个观察者，并且通过接口对观察者与被观察者进行逻辑解耦，降低二者的直接耦合。&emsp;&emsp;1. 针对观察者与被观察者分别定义接口，有利于分别进行扩展。&emsp;&emsp;2. 定义观察者集合，并定义针对集合的添加、删除操作，用于增加、删除订阅者（观察者&emsp;&emsp;3. 定义通知方法，用于将新情况通知给观察者用户（订阅者用户）&emsp;&emsp;4、观察者中需要有个接收被观察者通知的方法。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_建造者模式（八）]]></title>
    <url>%2F2019%2F03%2F28%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言 &emsp;&emsp;双休日出去玩了2天，一直没更新，今天我们继续，上一回咱们说了原型模式，这次我们来讲讲建造者模式。 示例地址 &emsp;&emsp;Demo 类图 建造者模式定义&emsp;&emsp;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示 建造者模式使用场景&emsp;&emsp;1. 相同的方法，不同的执行顺序，产生不同的事件结果时。&emsp;&emsp;2. 多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时。&emsp;&emsp;3. 产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常合适。&emsp;&emsp;4. 当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值时。 建造者相关的概念&emsp;&emsp;Product 产品类：产品的抽象类&emsp;&emsp;Builder：抽象Builder类，规范产品的组建，一般是由子类实现具体的组建过程。&emsp;&emsp;ConcreteBuilder :具体的Builder类。&emsp;&emsp;Director:统一组装过程。 建造者模式示例&emsp;&emsp;在开发过程中，我们会创建很多的Bean,比如下面这个 1. 创建Bean123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/** * 新闻实体类 * * @author 512573717@qq.com * @created 2018/7/16 下午5:32. */public class News &#123; private int id; private String title; private String subTitle; private String createTime; private String lookCount; private String type; public News() &#123; &#125; public News(int id, String title, String subTitle, String createTime, String lookCount, String type) &#123; this.id = id; this.title = title; this.subTitle = subTitle; this.createTime = createTime; this.lookCount = lookCount; this.type = type; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getSubTitle() &#123; return subTitle; &#125; public void setSubTitle(String subTitle) &#123; this.subTitle = subTitle; &#125; public String getCreateTime() &#123; return createTime; &#125; public void setCreateTime(String createTime) &#123; this.createTime = createTime; &#125; public String getLookCount() &#123; return lookCount; &#125; public void setLookCount(String lookCount) &#123; this.lookCount = lookCount; &#125; public String getType() &#123; return type; &#125; public void setType(String type) &#123; this.type = type; &#125; @Override public String toString() &#123; return &quot;News&#123;&quot; + &quot;id=&quot; + id + &quot;, title=&apos;&quot; + title + &apos;\&apos;&apos; + &quot;, subTitle=&apos;&quot; + subTitle + &apos;\&apos;&apos; + &quot;, createTime=&apos;&quot; + createTime + &apos;\&apos;&apos; + &quot;, lookCount=&apos;&quot; + lookCount + &apos;\&apos;&apos; + &quot;, type=&apos;&quot; + type + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; 2. 使用的时候，我们需要这样12News news = new News(1, &quot;今日快讯&quot;, &quot;北京大暴雨&quot;,&quot;2018-01-17&quot;, &quot;200&quot;, &quot;历史&quot;);System.out.println(news.toString()); 3. 导致的问题&emsp;&emsp;这个构造器调用通常需要许多你本不想设置的参数，但还是不得不为它们传递值。 4. 换一种方式12345678News newsBean = new News();newsBean.setId(1);newsBean.setTitle(&quot;今日快讯&quot;);newsBean.setSubTitle(&quot;北京大暴雨&quot;);newsBean.setCreateTime(&quot;2018-01-17&quot;);newsBean.setLookCount(&quot;200&quot;);newsBean.setType(&quot;历史&quot;);System.out.println(newsBean.toString()); 5. 存在问题&emsp;&emsp;构造过程被分到了几个调用中，在构造过程中JavaBean可能处于不一致的状态。 建造者模式 &emsp;&emsp;我们使用建模者模式来解决问题 1. 抽象建造者类1234567891011121314151617181920212223/** * 抽象建造者类 * * @author 512573717@qq.com * @created 2018/7/16 下午4:36. */public abstract class Buildler &#123; public abstract Buildler setId(int id); public abstract Buildler setTitle(String title); public abstract Buildler setSubTitle(String subTitle); public abstract Buildler setCreateTime(String createTime); public abstract Buildler setLookCount(String lookCount); public abstract Buildler setType(String type); public abstract News build();&#125; 2. 具体建造者类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 具体建造者类 * * @author 512573717@qq.com * @created 2018/7/16 下午4:52. */public class SimpleBuilder extends Buildler &#123; private News mNews; public SimpleBuilder() &#123; mNews = new News(); &#125; @Override public Buildler setId(int id) &#123; mNews.setId(id); return this; &#125; @Override public Buildler setTitle(String title) &#123; mNews.setTitle(title); return this; &#125; @Override public Buildler setSubTitle(String subTitle) &#123; mNews.setSubTitle(subTitle); return this; &#125; @Override public Buildler setCreateTime(String createTime) &#123; mNews.setCreateTime(createTime); return null; &#125; @Override public Buildler setLookCount(String lookCount) &#123; mNews.setLookCount(lookCount); return this; &#125; @Override public Buildler setType(String type) &#123; mNews.setType(type); return this; &#125; @Override public News build() &#123; return mNews; &#125;&#125; 3. 指挥者类12345678910111213141516/** * 指挥者类 * * @author 512573717@qq.com * @created 2018/7/16 下午4:57. */public class Director &#123; // 组装产品 public static News create(String type) &#123; return new SimpleBuilder().setType(type) .setId(1) .setTitle(&quot;历史上的今天&quot;) .build(); &#125;&#125; 4. 调用1234567891011News history = Director.create(&quot;历史&quot;);News military = Director.create(&quot;军事&quot;);System.out.println(history.toString());System.out.println(military.toString());// 另外一种方式创建SimpleBuilder simpleBuilder = new SimpleBuilder();News science =simpleBuilder.setType(&quot;科技&quot;).setTitle(&quot;小米上市&quot;).build();System.out.println(science.toString()); 总结 &emsp;&emsp;在《Effective Java》书中第二条，就提到“遇到多个构造器参数时要考虑用构建器”，其实这里的构建器就属于建造者模式。建造者模式将构建与表示分离。上面的例子中，我们其实根本就不会知道具体是怎么产生一条新闻的，因为这个过程让director给代劳了。然后，SimpleBuilder。director其实只是执行了这个过程。这样子，达到了分离模块的功能。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_原型模式（七）]]></title>
    <url>%2F2019%2F03%2F27%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;回顾上一节我们讲的状态模式，这节我们来讲一下原型模式。和原型模式相关的2个概念：浅拷贝和深拷贝。 示例地址&emsp;&emsp;Demo 先上类图 再看定义&emsp;&emsp;用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。 使用场景&emsp;&emsp;1. 类初始化需要消耗非常多的资源，这个资源包括数据、硬件资源等，通过原型拷贝避免这些消耗。&emsp;&emsp;2. 通过new产生一个对象需要非常繁琐的数据准备或者访问权限，&emsp;&emsp;3. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。 注意事项&emsp;&emsp;通过实现Cloneable接口的原型模式在调用clone函数构造实例时并不一定比通过new操作速度快，只有当通过new构造对象较为耗时或者说成本较高时，通过clone方法才能够获得效率上的提升。因此，在使用Cloneable时需要考虑构建对象的成本以及做一些效率上的测试。 浅拷贝&emsp;&emsp;浅拷贝是将原始对象中的数据型字段拷贝到新对象中去，将引用型字段的“引用”复制到新对象中去，不把“引用的对象”复制进去，所以原始对象和新对象引用同一对象，新对象中的引用型字段发生变化会导致原始对象中的对应字段也发生变化。 1. 示例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/** * 1.浅拷贝拷贝外层对象，对象里面的引用对象不进行拷贝。 * 2.深拷贝需要进行内部的拷贝（人为进行拷贝）。 * @author 512573717@qq.com * @created 2018/7/13 下午4:10. */public class Person implements Cloneable &#123; private String name; private Son mSon; public Person(String name, int age) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Son getSon() &#123; return mSon; &#125; public void setSon(Son son) &#123; mSon = son; &#125; @Override protected Object clone() throws CloneNotSupportedException &#123; return (Person) super.clone(); &#125; @Override public String toString() &#123; return &quot;Person&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, mSon=&quot; + mSon + &apos;&#125;&apos;; &#125;&#125;/** * @author 512573717@qq.com * @created 2018/7/13 下午4:54. */public class Son implements Cloneable &#123; public Son(String schoolName) &#123; this.schoolName = schoolName; &#125; private String schoolName; public String getSchoolName() &#123; return schoolName; &#125; public void setSchoolName(String schoolName) &#123; this.schoolName = schoolName; &#125; protected Son clone() &#123; Son clone = null; try &#123; clone = (Son) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; throw new RuntimeException(e); // won&apos;t happen &#125; return clone; &#125; @Override public String toString() &#123; return &quot;Son&#123;&quot; + &quot;schoolName=&apos;&quot; + schoolName + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; 2. 调用123456789101112131415161718192021public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Person p = new Person(&quot;zhang&quot;); Son son = new Son(&quot;实验二小&quot;); p.setSon(son); Person p1 = null; try &#123; p1 = (Person) p.clone(); p1.setName(&quot;yang&quot;); son.setSchoolName(&quot;希望小学&quot;); System.out.println(&quot;----&quot; + p.toString()); System.out.println(&quot;----&quot; + p1.toString()); &#125; catch (CloneNotSupportedException e) &#123; e.printStackTrace(); &#125;&#125; 3. 打印12System.out: ----Person&#123;name=&apos;zhang&apos;, mSon=Son&#123;schoolName=&apos;希望小学&apos;&#125;&#125;System.out: ----Person&#123;name=&apos;yang&apos;, mSon=Son&#123;schoolName=&apos;希望小学&apos;&#125;&#125; 4. 分析原因&emsp;&emsp;Object 类提供的方法 clone 只是拷贝本对象，其对象内部的数组、引用对象等都不拷贝，还是指向原生对象的内部元素地址。原始类型比如int,long,String(Java 就希望你把 String 认为是基本类型，String 是没有 clone 方法的)等都会被拷贝的。所以String改变了,引用的Son两者还是一样的，没有改变。 深拷贝 &emsp;&emsp;深拷贝是在引用方面不同，深拷贝就是创建一个新的和原始字段的内容相同的字段，是两个一样大的数据段，所以两者的引用是不同的，之后的新对象中的引用型字段发生改变，不会引起原始对象中的字段发生改变。 1. 示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 深拷贝 * * @author 512573717@qq.com * @created 2018/7/13 下午4:53. */public class PersonTwo implements Cloneable &#123; private String name; private Son mSon; public PersonTwo(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Son getSon() &#123; return mSon; &#125; public void setSon(Son son) &#123; mSon = son; &#125; @Override protected Object clone() &#123; PersonTwo clone = null; try &#123; clone = (PersonTwo) super.clone(); &#125; catch (CloneNotSupportedException e) &#123; throw new RuntimeException(e); // won&apos;t happen &#125; clone.mSon = mSon.clone(); return clone; &#125; @Override public String toString() &#123; return &quot;Person&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, mSon=&quot; + mSon + &apos;&#125;&apos;; &#125;&#125; 2. 调用1234567891011121314151617public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); PersonTwo p = new PersonTwo(&quot;zhang&quot;); Son son = new Son(&quot;实验二小&quot;); p.setSon(son); PersonTwo p1 = null; p1 = (PersonTwo) p.clone(); p1.setName(&quot;yang&quot;); son.setSchoolName(&quot;希望小学&quot;); System.out.println(&quot;----&quot; + p.toString()); System.out.println(&quot;----&quot; + p1.toString());&#125; 3. 打印12System.out:----Person&#123;name=&apos;zhang&apos;, mSon=Son&#123;schoolName=&apos;希望小学&apos;&#125;&#125;System.out: ----Person&#123;name=&apos;yang&apos;, mSon=Son&#123;schoolName=&apos;实验二小&apos;&#125;&#125; 4. 总结&emsp;&emsp;深拷贝到达了我们想要的效果，拷贝的时候所有的引用都变了 原型模式示例&emsp;&emsp;日常生活中，我们总接收或者发送邮件，如果让我们来写一个程序发送邮件怎么写。 1. 先来定义个发送邮件的类1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 邮件模板Bean * * @author 512573717@qq.com * @created 2018/7/13 下午3:02. */public class Mail &#123; public String receiver;// 接收者 public String tail;// 结尾备注 private String context; // 内容 private String sub; // 标题 public String getReceiver() &#123; return receiver; &#125; public void setReceiver(String receiver) &#123; this.receiver = receiver; &#125; public String getTail() &#123; return tail; &#125; public void setTail(String tail) &#123; this.tail = tail; &#125; public String getContext() &#123; return context; &#125; public void setContext(String context) &#123; this.context = context; &#125; public String getSub() &#123; return sub; &#125; public void setSub(String sub) &#123; this.sub = sub; &#125;&#125; 2. 发送邮件123456789101112131415161718192021222324public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); /* 发送邮件 */ final Mail mail = new Mail(); mail.setTail(&quot;xxx银行的所有版权&quot;); for (int i = 0; i &lt; 100; i++) &#123; mail.setSub(&quot;i&quot; + &quot; 先生（女士） &quot;); mail.setReceiver(&quot;i0001122&quot; + &quot;@qq.com&quot;); sendMail(mail); &#125; &#125; public static void sendMail(Mail mail) &#123; System.out.println(&quot;标题： &quot; + mail.getSub() + &quot;\t收件人&quot; + mail.getReceiver() + &quot;\t....发送成功！ &quot;); &#125;&#125; 3. 存在问题&emsp;&emsp;如果使用单线程发送，按照一封邮件发出去需要 0.03秒, 1000封邮件需要30秒，可以接受。100万封邮件呢？大概就是几小时，肯定行不通。那么我们换成多线程,将sendMail任务封装，但是问题有来了，因为用的是同一个对象，如果线程1还没发送完，线程2执行了，那么就造成了数据错乱，线程1发送的名字变成了线程2的。 4. 解决办法&emsp;&emsp;使用mail.clone()将对象拷贝一份，产生一个新的对象，和原有对象一样，然后再修改细节的数据，如设置称谓，设置收件人地址等等。而这种不通过 new 关键字来产生一个对象，而是通过对象拷贝来实现的模式就叫做原型模式。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * 邮件模板Bean * * @author 512573717@qq.com * @created 2018/7/13 下午3:02. */public class Mail implements Cloneable &#123; ....... ....... ....... // 进行浅拷贝 @Override protected Mail clone() throws CloneNotSupportedException &#123; Mail mail = (Mail) super.clone(); return mail; &#125;&#125;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); for (int i = 0; i &lt; 100; i++) &#123; Mail cloneMail; try &#123; cloneMail = mail.clone(); cloneMail.setSub(&quot;i&quot; + &quot; 先生（女士） &quot;); cloneMail.setReceiver(&quot;i0001122&quot; + &quot;@qq.com&quot;); sendMail(cloneMail); &#125; catch (CloneNotSupportedException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; public static void sendMail(Mail mail) &#123; System.out.println(&quot;标题： &quot; + mail.getSub() + &quot;\t收件人&quot; + mail.getReceiver() + &quot;\t....发送成功！ &quot;); &#125;&#125; 总结 对象拷贝时，类的构造函数是不会被执行的。&emsp;&emsp;一个实现了 Cloneable 并重写了 clone 方法的类 A,有一个构造函数B，通过 new 关键字产生了一个对象 S，再然后通过 S.clone()方式产生了一个新的对象 T，那么在对象拷贝时构造函数 B 是不会被执行的，Object 类的 clone 方法的原理是从内存中（具体的说就是堆内存）以二进制流的方式进行拷贝，重新分配一个内存块，那构造函数没有被执行也是非常正常的了。 final 类型修饰的成员变量不能进行深拷贝 在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone的方法创建一个对象，然后由工厂方法提供给调用者。原型模式先产生出一个包含大量共有信息的类，然后可以拷贝出副本，修正细节信息，建立了一个完整的个性对象。 参考博客&emsp;&emsp;23中设计模式之_原型模式(深/浅拷贝)]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_状态模式（六）]]></title>
    <url>%2F2019%2F03%2F26%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;上一节我们说了策略模式。这一节我们讲讲策略模式的双胞胎弟弟：状态模式，这个模式大家可能不常见，也不常用，但是我们还是需要了解一下。 示例地址&emsp;&emsp;Demo 依然是类图 在看定义&emsp;&emsp;当一个对象的内在状态改变时允许改变其行为，这个对象看起来就是改变了其类。 使用场景&emsp;&emsp; 1. 一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。&emsp;&emsp;2. 代码中包含大量与对象状态有关的条件语句，例如，一个操作中含有庞大的多分支语句（if-else或者switch-case），且这些分支依赖于该对象的状态。 状态模式的作用&emsp;&emsp;将每一个条件分支放入一个独立的类中，这是的你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化，这样通过多态来去除过多的、重复的if-else等分支语句。 状态模式的示例&emsp;&emsp;我们上初中的时候都学过物理，知道液化、升华、气化，大自然的水也有这三种状态固体、液体、气体，不同的状态有不同的表现形式，固态是冰，液态是水，气态就是水蒸气了。 1. 定义一个状态接口1234567891011121314/** * 水的状态 * * @author 512573717@qq.com * @created 2018/7/12 下午4:15. */public interface IState &#123; // 什么形状 void shape(); // 什么用途 void use();&#125; 2. 各种状态的实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * 固体 * * @author 512573717@qq.com * @created 2018/7/12 下午5:07. */public class IceState implements IState &#123; @Override public void shape() &#123; System.out.println(&quot;这是0度以下的水 固体的&quot;); &#125; @Override public void use() &#123; System.out.println(&quot;当前用途：可以用来存储蔬菜，保鲜的作用&quot;); &#125;&#125;/** * 液体 * * @author 512573717@qq.com * @created 2018/7/12 下午5:11. */public class FluidState implements IState &#123; @Override public void shape() &#123; System.out.println(&quot;这是0度到100之间的水 液体的&quot;); &#125; @Override public void use() &#123; System.out.println(&quot;当前用途：洗澡、浇树&quot;); &#125;&#125;/** * 气体 * * @author 512573717@qq.com * @created 2018/7/12 下午5:10. */public class GasState implements IState &#123; @Override public void shape() &#123; System.out.println(&quot;这是100度以上的水 气体的&quot;); &#125; @Override public void use() &#123; System.out.println(&quot;当前用途：用来真桑拿、食品等&quot;); &#125;&#125; 3. 状态管理类1234567891011121314151617181920212223242526272829303132333435363738/** * 状态管理类 * * @author 512573717@qq.com * @created 2018/7/12 下午5:12. */public class ClientContext &#123; private IState mIState = new IceState(); private static volatile ClientContext mClientContext; private ClientContext() &#123; &#125; public static ClientContext getInstance() &#123; if (null == mClientContext) &#123; synchronized (ClientContext.class) &#123; if (null == mClientContext) &#123; mClientContext = new ClientContext(); &#125; &#125; &#125; return mClientContext; &#125; public void setIState(IState IState) &#123; mIState = IState; &#125; public void use() &#123; mIState.use(); &#125; public void shape() &#123; mIState.shape(); &#125;&#125; 4. Client使用12345678910// 默认是固态的水ClientContext.getInstance().use();//液态的水ClientContext.getInstance().setIState(new FluidState());ClientContext.getInstance().use();// 气态ClientContext.getInstance().setIState(new GasState());ClientContext.getInstance().use(); 总结&emsp;&emsp;状态模式主要是避免代码膨胀，同时保证程序的扩展性和维护性。 策略模式与状态模式的区别&emsp;&emsp;策略模式：封装一系列平行且复杂多变的实现方式。&emsp;&emsp;状态模式：实现把对象的内在状态的变化封装起来，用外部行为来表现出来。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_策略模式（五）]]></title>
    <url>%2F2019%2F03%2F25%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;继续上一节的模板方法模式,这节我们来说说策略模式。 示例地址&emsp;&emsp;Demo 先看类图 看看策略模式的定义&emsp;&emsp;策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。 使用场景&emsp;&emsp;1. 针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。&emsp;&emsp;2. 需要安全地封装多种同一类型的操作时。&emsp;&emsp;3. 出现同一抽象类有多个子类，而又需要使用if-else或者switch-case来选择具体子类时。 策略模式示例&emsp;&emsp;上班几年了，估计大家手里都有点零花钱，银行的那点利息，我们只能无力吐槽了，现在是互联网时代，我们可以选择的很多，比如 余额宝、网商银行、陆金所等等。下面我们以陆金所为例。对于你存多少钱、多长时间，利息都是不同的。我们用策略模式来实现。 1. 计算收益的接口123456789/** * @author 512573717@qq.com * @created 2018/7/11 下午3:17. */public interface IFinanceStrategy &#123; //计算收益 double earnings(int total);&#125; 2. 3月的利息1234567891011121314151617/** * 90天的收益 * * @author 512573717@qq.com * @created 2018/7/12 上午9:46. */public class ThreeStrategy implements IFinanceStrategy &#123; @Override public double earnings(int total) &#123; // 90天后可提现 年利率4.7% BigDecimal b1 = new BigDecimal(0.047 * 90); BigDecimal b2 = new BigDecimal(365); double result = b1.divide(b2, 6, BigDecimal.ROUND_HALF_UP).doubleValue() * total; return result; &#125;&#125; 3. 半年的利息123456789101112131415161718/** * 197天收益 * * @author 512573717@qq.com * @created 2018/7/12 下午1:53. */public class HalfYearStrategy implements IFinanceStrategy &#123; @Override public double earnings(int total) &#123; // 197天后可提现 年利率5.2% BigDecimal b1 = new BigDecimal(0.052 * 197); BigDecimal b2 = new BigDecimal(365); double result = b1.divide(b2, 6, BigDecimal.ROUND_HALF_UP).doubleValue() * total; return result; &#125;&#125; 4. 一年的利息1234567891011121314/** * 一年的收益 * * @author 512573717@qq.com * @created 2018/7/12 下午1:56. */public class OneYearStrategy implements IFinanceStrategy &#123; @Override public double earnings(int total) &#123; // 1年后可提现 年利率10.2% return 0.102 * total; &#125;&#125; 5. 总收益计算器123456789101112131415161718/** * 总收益计算器 * * @author 512573717@qq.com * @created 2018/7/12 下午2:01. */public class TotalMoney &#123; private IFinanceStrategy mFinanceStrategy; public void setFinanceStrategy(IFinanceStrategy financeStrategy) &#123; mFinanceStrategy = financeStrategy; &#125; public double totalMoney(int total) &#123; return mFinanceStrategy.earnings(total); &#125;&#125; 6. Client12345678910111213TotalMoney money=new TotalMoney();System.out.println(&quot;三个月的收益&quot;);money.setFinanceStrategy(new ThreeStrategy());System.out.println(money.totalMoney(50000));System.out.println(&quot;半年的收益&quot;);money.setFinanceStrategy(new HalfYearStrategy());System.out.println(money.totalMoney(50000));System.out.println(&quot;一年的收益&quot;);money.setFinanceStrategy(new OneYearStrategy());System.out.println(money.totalMoney(50000)); 总结 &emsp;&emsp;增强程序的扩展性，如果我们想新增一个三年的利益，只需要实现计算利益接口， 在Client set新的规则即可。 策略模式与工厂模式的区别&emsp;&emsp;上面的例子，通过工厂模式也能够实现。那策略模式与工厂模式的区别是什么？ 用途不一样&emsp;&emsp;1. 工厂是创建型模式,它的作用就是创建对象；&emsp;&emsp;2. 策略是行为型模式,它的作用是让一个对象在许多行为中选择一种行为。 关注点不一样&emsp;&emsp;1. 一个关注对象创建&emsp;&emsp;2. 一个关注行为的封装]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_模板方法模式（四）]]></title>
    <url>%2F2019%2F03%2F24%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;上一节我们说了抽象工厂模式，今天我们来说说”模板方法模式”。 示例地址&emsp;&emsp;Demo 依然是先看类图 模板方法模式的定义&emsp;&emsp;定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使的子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 使用场景&emsp;&emsp;1. 多个子类有公有的方法，并且逻辑基本相同时。&emsp;&emsp;2. 重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则有各个子类实现。&emsp;&emsp;3. 重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。 模板方法模式示例&emsp;&emsp;每到年底，在北京的外地人都要回家，很多人选择做火车回家，也有选择坐飞机回去的。但是他们都经历同样的过程。买票、上车（登机）、下车、回家。 1. 首先，我们来写基类1234567891011121314151617181920/** * 春节回家的基类 * * @author 512573717@qq.com * @created 2018/7/10 下午3:03. */public abstract class BaseGoHome &#123; //选择出行方式 public abstract void travelWay(); //买票 public abstract void buyTicket(); //上车 public abstract void shangche(); //下车 public abstract void xiache();&#125; 2. 看看老王怎么回家的123456789101112131415161718192021222324252627/** * 老王回家 * * @author 512573717@qq.com * @created 2018/7/10 下午3:11. */public class LaoWang extends BaseGoHome &#123; @Override public void travelWay() &#123; System.out.println(&quot;选择做火车回家&quot;); &#125; @Override public void buyTicket() &#123; System.out.println(&quot;去火车站买票&quot;); &#125; @Override public void shangche() &#123; System.out.println(&quot;在候车室检票进站&quot;); &#125; @Override public void xiache() &#123; System.out.println(&quot;下车 做公交回家&quot;); &#125;&#125; 3. 在看看小明的123456789101112131415161718192021222324252627/** * 小明回家 * * @author 512573717@qq.com * @created 2018/7/10 下午3:10. */public class XiaoMing extends BaseGoHome &#123; @Override public void travelWay() &#123; System.out.println(&quot;选择做飞机回家&quot;); &#125; @Override public void buyTicket() &#123; System.out.println(&quot;在网上买提前订票&quot;); &#125; @Override public void shangche() &#123; System.out.println(&quot;换登记牌 登机&quot;); &#125; @Override public void xiache() &#123; System.out.println(&quot;打车回家&quot;); &#125;&#125; 4. 具体运用12345678910111213System.out.println(&quot;小明春节回家&quot;);BaseGoHome xiaoming = new XiaoMing();xiaoming.travelWay();xiaoming.buyTicket();xiaoming.shangche();xiaoming.xiache();System.out.println(&quot;老王春节回家&quot;);BaseGoHome laowang = new XiaoMing();laowang.travelWay();laowang.buyTicket();laowang.shangche();laowang.xiache(); 总结&emsp;&emsp;模板方法模式，我们用的应该是比较多的，例如BaseActivity、BaseFragment。Android源码的Activity是一个典型的模板方法模式。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_抽象工厂模式（三）]]></title>
    <url>%2F2019%2F03%2F23%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;上一回怎么说了工厂方法模式，这回咱们来讲一讲工厂模式的另外一种表现，今天的主角”抽象工厂模式”。 示例地址&emsp;&emsp;Demo 先上类图 看看定义&emsp;&emsp;为创建一组相关或者相互依赖的对象提供一个接口，而不需要指定它们的具体类。 使用场景&emsp;&emsp;一个对象族有相同的约束时可以使用抽象工厂模式。 抽象工厂中的2个概念产品族&emsp;&emsp;位于不同产品等级结构中，功能相关联的产品组成的家族。代表的是纵向结构。&emsp;&emsp;举个例子,华为有华为笔记本，华为手机，华为手环等，小米也有小米手机，小米笔记本，小米手环。华为这个系列的构成了家族。称为产品族。 产品等级&emsp;&emsp;产品等级结构即产品的继承结构。代表的是横向结构。&emsp;&emsp;举个列子，一个抽象类手机，下面可以生成小米手机、华为手机。 产品族与产品等级图 产品类1. 手机12345678910111213141516171819202122232425262728293031323334353637/** * 手机 * * @author 512573717@qq.com * @created 2018/7/9 上午10:19. */public interface IPhone &#123; void phone();&#125;/** * 小米手机 * * @author 512573717@qq.com * @created 2018/7/9 上午10:25. */public class XiaomiPhone implements IPhone &#123; @Override public void phone() &#123; System.out.println(&quot;小米手机&quot;); &#125;&#125;/** * 华为手机 * * @author 512573717@qq.com * @created 2018/7/9 上午10:23. */public class HuaweiPhone implements IPhone &#123; @Override public void phone() &#123; System.out.println(&quot;华为手机&quot;); &#125;&#125; 2. 笔记本12345678910111213141516171819202122232425262728293031323334353637/** * 笔记本 * * @author 512573717@qq.com * @created 2018/7/9 上午10:27. */public interface IComputer &#123; void computer();&#125;/** * 小米笔记本 * * @author 512573717@qq.com * @created 2018/7/9 上午10:44. */public class XiaomiComputer implements IComputer &#123; @Override public void computer() &#123; System.out.println(&quot;小米笔记本&quot;); &#125;&#125;/** * 华为笔记本 * * @author 512573717@qq.com * @created 2018/7/9 上午10:37. */public class HuaweiComputer implements IComputer &#123; @Override public void computer() &#123; System.out.println(&quot; 华为笔记本&quot;); &#125;&#125; 3. 手环12345678910111213141516171819202122232425262728293031323334353637/** * 手环 * * @author 512573717@qq.com * @created 2018/7/9 上午10:55. */public interface IBracelet &#123; void bracelet();&#125;/** * 小米手环 * * @author 512573717@qq.com * @created 2018/7/9 上午10:59. */public class XiaomiBracelet implements IBracelet &#123; @Override public void bracelet() &#123; System.out.println(&quot;小米手环&quot;); &#125;&#125;/** * 华为手环 * * @author 512573717@qq.com * @created 2018/7/9 上午10:57. */public class HuaweiBracelet implements IBracelet &#123; @Override public void bracelet() &#123; System.out.println(&quot;华为手环&quot;); &#125;&#125; 4. 工厂类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263/** * 抽象工厂 * @author 512573717@qq.com * @created 2018/7/9 上午10:16. */public abstract class ProductFactory &#123; // 创建手机 public abstract IPhone createPhone(); // 创建笔记本 public abstract IComputer createComputer(); // 创建手环 public abstract IBracelet createBracelet();&#125;/** * 小米 * * @author 512573717@qq.com * @created 2018/7/9 上午11:09. */public class Xiaomi extends ProductFactory &#123; @Override public IPhone createPhone() &#123; return new XiaomiPhone(); &#125; @Override public IComputer createComputer() &#123; return new XiaomiComputer(); &#125; @Override public IBracelet createBracelet() &#123; return new XiaomiBracelet(); &#125;&#125;/** * 华为 * * @author 512573717@qq.com * @created 2018/7/9 上午11:03. */public class Huawei extends ProductFactory &#123; @Override public IPhone createPhone() &#123; return new HuaweiPhone(); &#125; @Override public IComputer createComputer() &#123; return new HuaweiComputer(); &#125; @Override public IBracelet createBracelet() &#123; return new HuaweiBracelet(); &#125;&#125; 5. Client测试12345678910111213//华为系列System.out.println(&quot;华为&quot;);ProductFactory huawei = new Huawei();huawei.createPhone().phone();huawei.createComputer().computer();huawei.createBracelet().bracelet();//小米系列System.out.println(&quot;小米&quot;);ProductFactory xiaomi=new Xiaomi();xiaomi.createPhone().phone();xiaomi.createComputer().computer();xiaomi.createBracelet().bracelet(); 总结&emsp;&emsp;抽象工厂模式是某一系列的产品的工厂。可以创建多个不同类型的产品。例如上面所说的 华为是一个产品工厂，能够创建手机 、笔记本、手机等多个类型的产品。 抽象工厂 与工厂方法的区别&emsp;&emsp;工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则需要面对多个产品等级结构。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_工厂方法模式（二）]]></title>
    <url>%2F2019%2F03%2F22%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;上一节我们说了单例模式，这一节我们来说说工厂方法模式。 示例地址&emsp;&emsp;Demo 先看类图 工厂方法模式定义&emsp;&emsp;定义一个用于创建对象的接口，让子类决定实例化哪一个类。 使用场景&emsp;&emsp;在任何需要生成复制对象的地方，都可以使用工厂方法模式。 工厂方法模式示例&emsp;&emsp;举个例子，我们吃饭的时候都会点主食，主食的种类分为 米饭、面,南方人喜欢吃米饭，但是北方人喜欢吃面。 简单工厂模式1. 我们先来设计产品12345678910/** * 主食 * @author 512573717@qq.com * @created 2018/7/6 下午2:36. * */public interface IZhuShi &#123; // 主食吃什么 void eat();&#125; 2. 产品一:南方人爱吃米饭12345678910111213/** * 主食米饭 * * @author 512573717@qq.com * @created 2018/7/6 下午2:37. * */public class Rice implements IZhuShi &#123; @Override public void eat() &#123; System.out.println(&quot;主食米饭上来了。&quot;); &#125;&#125; 3. 产品二:北方人爱吃面食123456789101112/** * 主食面 * * @author 512573717@qq.com * @created 2018/7/6 下午2:43. */public class Flour implements IZhuShi &#123; @Override public void eat() &#123; System.out.println(&quot;主食 面上来了。&quot;); &#125;&#125; 简单（静态）工厂&emsp;&emsp;接下来是我们怎么创建产品了,就是我们在点餐的时候要选择吃什么。 1. 主食工厂1234567891011121314151617181920212223/** * 主食工厂 * * @author 512573717@qq.com * @created 2018/7/6 下午2:48. */public class FactoryZhuShi &#123; //南方人 public static final int SOUTH = 1; //北方人 public static final int NORTH = 2; public static IZhuShi createZhuShi(int type) &#123; switch (type) &#123; case SOUTH: return new Rice(); case NORTH: return new Flour(); default: return new Rice(); &#125; &#125;&#125; 2. 调用工厂创建产品12345IZhuShi south = FactoryZhuShi.createZhuShi(FactoryZhuShi.SOUTH);south.eat();IZhuShi north = FactoryZhuShi.createZhuShi(FactoryZhuShi.NORTH);north.eat(); 3. 如果我们增加了产品三(水饺)，这个时候就需要修改工程类了，违背了设计模式的六大原则（开闭原则）。简单（反射）工厂&emsp;&emsp;Java中反射是无所不能的。那我们就反一种思路，我们通过反射实现。 1. 反射实现工厂12345678910111213141516171819202122/** * 通过反射获取主食 * * @author 512573717@qq.com * @created 2018/7/6 下午3:11. */public class ReflectFactoryZhuShi &#123; public static &lt;T extends IZhuShi&gt; T createZhuShi(Class&lt;T&gt; cls) &#123; T object = null; try &#123; object = (T) (Class.forName(cls.getName())).newInstance(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; return object; &#125;&#125; 2. 调用工厂创建产品12345IZhuShi south = ReflectFactoryZhuShi.createZhuShi(Rice.class);south.eat();IZhuShi north = ReflectFactoryZhuShi.createZhuShi(Flour.class);north.eat(); 3. 在增加新产品的时候，我们无需修改工厂类，解决设计模式的开闭原则。但是反射影响性能，我们在来看看方法工厂模式简单工厂&emsp;&emsp;反射有效率问题，我们看看最常用的一种写法 1. 日常写法12345678910111213141516/** * 简单工厂 * * @author 512573717@qq.com * @created 2018/7/6 下午3:37. */public class MethodFactoryZhuShi &#123; public static Rice getRice() &#123; return new Rice(); &#125; public static Flour getFlour() &#123; return new Flour(); &#125;&#125; 2. 简单调用12345IZhuShi south = MethodFactoryZhuShi.getRice();south.eat();IZhuShi north = MethodFactoryZhuShi.getFlour();north.eat(); 工厂方法模式1. 工厂接口123456789/** * 主食创建工厂 * * @author 512573717@qq.com * @created 2018/7/6 下午4:08. */public interface IFactory&lt;T extends IZhuShi&gt; &#123; T create();&#125; 2. 米饭工厂12345678910111213/** * 米饭工厂 * * @author 512573717@qq.com * @created 2018/7/8 下午11:11. * */public class RiceFactory implements IFactory&lt;Rice&gt; &#123; @Override public Rice create() &#123; return new Rice(); &#125;&#125; 3. 面食工厂12345678910111213/** * 面食工厂 * * @author 512573717@qq.com * @created 2018/7/8 下午11:11. * */public class FlourFactory implements IFactory&lt;Flour&gt; &#123; @Override public Flour create() &#123; return new Flour(); &#125;&#125; 4. 简单调用1234567IFactory northFactory = new FlourFactory();IZhuShi north = northFactory.create();north.eat();IFactory southFactory = new RiceFactory();IZhuShi south = southFactory.create();south.eat(); 总结&emsp;&emsp; 当有新的产品产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有的代码。（即当有新产品时，只要创建并基础抽象产品；新建具体工厂继承抽象工厂；而不用修改任何一个类）工厂方法模式是完全符合开闭原则的！]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_单例模式（一）]]></title>
    <url>%2F2019%2F03%2F21%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;”送人玫瑰，手有余香”。最近在看设计模式，写点笔记记录一下，第一可以巩固一下所看的知道，第二方便他人阅读参考。从最简单的入手吧，今天的主角单例模式。 示例地址&emsp;&emsp;Demo 先看看单例模式的类图 再看看单例模式的定义&emsp;&emsp;确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。 使用场景&emsp;&emsp;确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源。 单例模式主要表现1. 构造方法私有 2. 通过一个静态方法返回改对象 单例模式示例1. 饿汉式1234567891011121314151617/** * 单例 饿汉式 * * @author 512573717@qq.com * @created 2018/7/2 下午1:59. */public class Singleton &#123; private static Singleton mInstance = new Singleton(); private Singleton() &#123; &#125; public static Singleton getInstance() &#123; return mInstance; &#125;&#125; 2. 懒汉式1234567891011121314151617181920212223242526272829/** * 单例 懒汉式 * * @author 512573717@qq.com * @created 2018/7/2 下午1:59. */public class Singleton &#123; //synchronized虽然保证了原子性，但却没有保证指令重排序的正确性，会出现A线程执行初始化， // 但可能因为构造函数里面的操作太多了，所以A线程的uniqueInstance实例还没有造出来，但已经被赋值了。 // 而B线程这时过来了，错以为uniqueInstance已经被实例化出来，一用才发现uniqueInstance尚未被初始化。 // 要知道我们的线程虽然可以保证原子性，但程序可能是在多核CPU上执行。 // volatile http://www.cnblogs.com/dolphin0520/p/3920373.html private static volatile Singleton mInstance = null; private Singleton() &#123; &#125; public static Singleton getInstance() &#123; if (null == mInstance) &#123; // 防止 多线程并发 创建多个实例 synchronized (Singleton.class) &#123; if (null == mInstance) &#123; mInstance = new Singleton(); &#125; &#125; &#125; return mInstance; &#125;&#125; 3. 静态内部类12345678910111213141516171819/** * 单例 静态内部类 * * @author 512573717@qq.com * @created 2018/7/2 下午1:59. */public class Singleton &#123; private Singleton() &#123; &#125; public static class SingletonHolder&#123; private static volatile Singleton mInstance = new Singleton(); &#125; public static Singleton getInstance() &#123; return SingletonHolder.mInstance; &#125;&#125; 4. 容器管理123456789101112131415161718192021/** * 单例 容器管理 * * @author 512573717@qq.com * @created 2018/7/2 下午1:59. */public class Singleton &#123; private static Map&lt;String, Object&gt; mSingleMap = new HashMap&lt;&gt;(); private Singleton()&#123; &#125; static &#123; mSingleMap.put(&quot;service&quot;, new Singleton()); &#125; public static Object getServiceForName(String name) &#123; return mSingleMap.get(name); &#125;&#125; 5. 其他体现形式123456789101112131415161718192021/** * 单例 其他体现形式 * @author 512573717@qq.com * @created 2018/7/2 下午1:59. */public class Singleton &#123; private static Singleton mInstance; private Singleton() &#123; &#125; static &#123; mInstance = new Singleton(); &#125; public static Object getInstance() &#123; return mInstance; &#125;&#125;]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_六大原则（开篇）]]></title>
    <url>%2F2019%2F03%2F20%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88%E5%BC%80%E7%AF%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[目录&emsp;&emsp;创建型模式 单例模式 工厂方法模式 抽象工厂模式 原型模式 建造者模式 &emsp;&emsp;结构型模式 代理模式 适配器模式 装饰模式 桥接模式 组合模式 享元模式 外观模式 &emsp;&emsp;行为型模式 模板方法模式 策略模式 状态模式 观察者模式 责任链模式 中介者模式 备忘录模式 命令模式 解释器模式 访问者模式 迭代器模式 一、单一职责原则定义&emsp;&emsp;一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。简单来说，一个类中应该是一组相关性很高的函数、数据的封装。 1. 一般我们写一个网络请求可能是这样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class HttpUtils &#123; private HttpUtils() &#123; &#125; public static &lt;T&gt; void get(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback, final boolean cache) &#123; OkHttpClient mOkHttpClient = new OkHttpClient(); // 公共参数 params.put(&quot;app_name&quot;, &quot;joke_essay&quot;); params.put(&quot;version_name&quot;, &quot;5.7.0&quot;); params.put(&quot;device_platform&quot;, &quot;android&quot;); final String jointUrl = Utils.jointParams(url, params); //打印 // 缓存问题 Log.e(&quot;Post请求路径：&quot;, jointUrl); // 缓存写到 SP 里面，多级缓存（内存中 30条,数据库 ，文件中 ） final String cacheJson = (String) PreferencesUtil.getInstance().getParam(jointUrl, &quot;&quot;); // 写一大堆处理逻辑 ，内存怎么扩展等等 if (cache &amp;&amp; !TextUtils.isEmpty(cacheJson)) &#123; Log.e(&quot;TAG&quot;, &quot;从缓存中获取数据&quot;); Gson gson = new Gson(); T objResult = (T) gson.fromJson(cacheJson, Utils.analysisClazzInfo(callback)); callback.onSuccess(objResult); return; &#125; Request.Builder requestBuilder = new Request.Builder().url(jointUrl).tag(context); //可以省略，默认是GET请求 Request request = requestBuilder.build(); mOkHttpClient.newCall(request).enqueue(new Callback() &#123; @Override public void onFailure(Call call, final IOException e) &#123; // 失败 callback.onFailure(e); &#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; final String resultJson = response.body().string(); Log.e(&quot;TAG&quot;, resultJson.equals(cacheJson) + &quot;&quot;); Log.e(&quot;TAG&quot;, resultJson + &quot;&quot;); if (cache &amp;&amp; resultJson.equals(cacheJson)) &#123; return; &#125; Gson gson = new Gson(); T objResult = (T) gson.fromJson(resultJson, Utils.analysisClazzInfo(callback)); callback.onSuccess(objResult); if (cache) &#123; PreferencesUtil.getInstance().saveParam(jointUrl, resultJson); &#125; &#125; &#125;); &#125;&#125; 2. 然后这样调用1234567891011121314151617181920212223Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); // 特定参数 params.put(&quot;iid&quot;, 6152551759L); params.put(&quot;aid&quot;, 7); HttpUtils.get(this, ConstantValue.UrlConstant.HOME_DISCOVERY_URL, params, new HttpCallBack&lt;DiscoverListResult&gt;() &#123; @Override public void onFailure(Exception e) &#123; // 失败 &#125; @Override public void onSuccess(DiscoverListResult result)&#123; if (result.isOK()) &#123; // 没有列表数据的情况, 打印 Toast 或者做一些其他处理 &#125; else &#123; // 有数据列表的情况，显示列表 showListData(result); &#125; &#125; &#125;,true); 3. 导致问题&emsp;&emsp;所有的功能都写在一个类里，这样随着功能的增多，HttpUtils 类会越来越大，代码也越来越复杂。HttpUtils简直就没有设计可言，更不要说扩展性、灵活性了。 4. 单一职责原则入场&emsp;&emsp;我们将HttpUtils进行拆分，一个类只负责一个职责。 5. HttpUtils123456789101112131415public class HttpUtils &#123; private OKHttpRequest mHttpRequest; public &lt;T&gt; void request() &#123; request(null); &#125; public &lt;T&gt; void request(final HttpCallBack&lt;T&gt; callback) &#123; // 异常判断 mHttpRequest.get(mContext, mUrl, mParams, callback, true); &#125; //省略其他代码&#125; 6. OKHttpRequest12345678910111213141516public class OKHttpRequest &#123; private HttpCache mHttpCache; public OKHttpRequest() &#123; mHttpCache = new HttpCache(); &#125; // 参数还是很多 public &lt;T&gt; void get(Context context, String url, Map&lt;String, Object&gt; params,final HttpCallBack&lt;T&gt; callback, final boolean cache) &#123; OkHttpClient mOkHttpClient = new OkHttpClient(); &#125; //省略其他代码&#125; 7. HttpCache123456789public class HttpCache &#123; public void saveCache(String finalUrl, String resultJson) &#123; PreferencesUtil.getInstance().saveParam(finalUrl, resultJson); &#125; public String getCache(String finalUrl) &#123; return (String) PreferencesUtil.getInstance().getParam(finalUrl, &quot;&quot;); &#125;&#125; 二、开闭原则定义&emsp;&emsp;软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是，对于修改是封闭的。我的理解是对于原来写好的代码里面是不可修改，但是对于外部又是可扩展的。其实就是多了一个接口而已。 1. 上面代码存在问题&emsp;&emsp;如果把xutils换成OkHttp，但是我没想过要去改每个接口，比如后来接着 Retrofit又出来了，以后还指不定要出一些什么，我想能不能再写得强大一些，可以切换，而不用改动原来的代码。 2. 修改后的类图 3. 开闭原则入场&emsp;&emsp;新增IHttpRequest接口123456789101112131415161718/** * @author 512573717@qq.com * @created 2018/8/22 上午10:49. */public interface IHttpRequest &#123; &lt;T&gt; void get(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback, final boolean cache); &lt;T&gt; void post(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback, final boolean cache); &lt;T&gt; void download(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback); &lt;T&gt; void upload(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback);&#125; 4. XUtilsRequest123456789101112131415public class XUtilsRequest implements IHttpRequest &#123; private SPHttpCache mHttpCache; public XUtilsRequest() &#123; mHttpCache = new SPHttpCache(); &#125; // 参数还是很多 public &lt;T&gt; void get(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback, final boolean cache) &#123; RequestParams requestParams = new RequestParams(); x.http().get(requestParams, new org.xutils.common.Callback.CommonCallback&lt;String&gt;() &#123; &#125;); &#125; 5. OKHttpRequest123456789101112131415public class OKHttpRequest implements IHttpRequest&#123; private SPHttpCache mHttpCache; public OKHttpRequest() &#123; mHttpCache = new SPHttpCache(); &#125; // 参数还是很多 public &lt;T&gt; void get(Context context, String url, Map&lt;String, Object&gt; params, final HttpCallBack&lt;T&gt; callback, final boolean cache) &#123; OkHttpClient mOkHttpClient = new OkHttpClient(); &#125;&#125; 6. HttpUtils1234567891011121314151617181920212223242526public class HttpUtils &#123; private IHttpRequest mHttpRequest; private static IHttpRequest mInitHttpRequest; public static HttpUtils with(Context context)&#123; return new HttpUtils(context); &#125; public HttpUtils httpRequest(IHttpRequest httpRequest)&#123; mHttpRequest = httpRequest; return this; &#125; public &lt;T&gt; void request()&#123; request(null); &#125; public &lt;T&gt; void request(final HttpCallBack&lt;T&gt; callback)&#123; if(mHttpRequest == null)&#123; mHttpRequest = mInitHttpRequest; &#125; // 异常判断 mHttpRequest.get(mContext,mUrl,mParams,callback,true); &#125; &#125; 7. Client12345678910111213141516171819HttpUtils.with(this).cache(true).get().httpRequest(new OKHttpRequest()).url(ConstantValue.UrlConstant.HOME_DISCOVERY_URL).param(&quot;iid&quot;, 6152551759L).param(&quot;aid&quot;, 7).request( new HttpCallBack&lt;DiscoverListResult&gt;() &#123; @Override public void onFailure(Exception e) &#123; // 失败 &#125; @Override public void onSuccess(DiscoverListResult result)&#123; if (result.isOK()) &#123; // 没有列表数据的情况, 打印 Toast 或者做一些其他处理 &#125; else &#123; // 有数据列表的情况，显示列表 showListData(result); &#125; &#125; &#125;); 8. 归纳&emsp;&emsp;当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。我们尽量不要通过继承等方式添加新的实现，这会导致类型的膨胀以及历史遗留代码的冗余。 三、里氏替换原则定义&emsp;&emsp;所有引用基类的地方必须能透明地使用其子类的对象。通俗点讲，只要父类能出现的地方子类就可以出现。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。 代码体现12HttpUtils.initHttpRequest(new OKHttpRequest());HttpUtils.initHttpRequest(new XUtilsRequest()); 四、依赖倒置原则定义&emsp;&emsp;依赖反转原则指代了一种特定的解耦形式，高层模块不依赖低层次模块的细节，说白了高层次就是不依赖细节而是依赖抽象。 1. 刚开始代码是这样写的123456789public class HttpUtils &#123; private OKHttpRequest mHttpRequest; private HttpUtils(Context context) &#123; mHttpRequest = new OKHttpRequest(); mParams = new HashMap&lt;&gt;(); this.mContext = context; &#125;&#125; 2. 用过开闭原则之后是这样写的123456789101112public class HttpUtils &#123; private IHttpRequest mHttpRequest; public static HttpUtils with(Context context)&#123; return new HttpUtils(context); &#125; public HttpUtils httpRequest(IHttpRequest httpRequest)&#123; mHttpRequest = httpRequest; return this; &#125;&#125; 3. 总结&emsp;&emsp;这个时候我们依赖的就已经不在是具体的细节了，而是抽象的 IHttpRequest ，具体的实现我们是在 Application 中配置的，可以配置 Okhttp 或者 xUtils 等等。从上面这几个来看要让整个系统更加灵活，似乎一直都是抽象的功劳。 五、接口隔离原则定义&emsp;&emsp;客户端不应该依赖它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。接口隔离原则将非常庞大、臃肿的接口拆分成为更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署，让客户端依赖的接口尽可能地小。 1. 我们在关闭文件流、Socket流通常是这样操作的12345678910111213141516171819202122232425262728private void breakConnection() &#123; mReadFlag = false; // 关闭输入流 if (mInStream != null) &#123; try &#123; mInStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 关闭输出流 if (mOutStream != null) &#123; try &#123; mOutStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; // 关闭Socket if (mSocket != null) &#123; try &#123; mSocket.close(); mSocket = null; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; &emsp;&emsp;各种try…catch嵌套，都是些简单的代码，但是会严重影响代码的可读性，并且多层级的大括号很容易将代码写到错误的层级中。大家应该对这类代码也非常反感，那我们看看如何解决这类问题。我们看源码发现他们都有一个 close 方法，而且这个方法是 Closeable 接口的，也就是说上面的这几个类都是实现了 Closeable 接口，该接口标识了一个可关闭的对象。 2.都实现了Closeable接口1234567891011public abstract class InputStream implements Closeable &#123; &#125;public abstract class OutputStream implements Closeable, Flushable &#123; &#125;public class Socket implements java.io.Closeable &#123; &#125; 3. Closeable1234567891011121314151617public interface Closeable extends AutoCloseable &#123; /** * Closes this stream and releases any system resources associated * with it. If the stream is already closed then invoking this * method has no effect. * * &lt;p&gt; As noted in &#123;@link AutoCloseable#close()&#125;, cases where the * close may fail require careful attention. It is strongly advised * to relinquish the underlying resources and to internally * &lt;em&gt;mark&lt;/em&gt; the &#123;@code Closeable&#125; as closed, prior to throwing * the &#123;@code IOException&#125;. * * @throws IOException if an I/O error occurs */ public void close() throws IOException;&#125; 4. 修改代码1234567891011121314151617181920212223private void breakConnection() &#123; mReadFlag = false; // 关闭输入流 close(mInStream); // 关闭输出流 close(mOutStream); // 关闭Socket close(mSocket);&#125;/*** 关闭 Closeable* @param closeable*/private void close(Closeable closeable) &#123; if (closeable != null) &#123; try &#123; closeable.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 5. 总结&emsp;&emsp;代码简洁了很多！保证了代码的重用性。close 方法的基本原理就是依赖于 Closeable 抽象而不是具体实现（这其实也是依赖倒置），并且建立在最小化依赖原则的基础，它只需要知道这个对象是可关闭，其他的一概不关心，也就是这里的接口隔离原则。 六、最少知识原则定义&emsp;&emsp;一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。 示例地址&emsp;&emsp;Demo]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式_UML建模（前传）]]></title>
    <url>%2F2019%2F03%2F19%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E5%BB%BA%E6%A8%A1%EF%BC%88%E5%89%8D%E4%BC%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[继承 表示方法：用实线空心三角箭头表示。（由子类指向父类） 接口 表示方法：空心三角形箭头的虚线。（有实现类指向接口） 依赖 概念：是一种使用的关系，即一个类的实现需要另一个类的协助。java中，方法参数需要传入另一个类的对象，就表示依赖这个类。 表示方法：虚线箭头，类A指向类B。(由使用者指向被使用者) 关联 概念：表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的。java中一个类的全局变量引用了另一个类，就表示关联了这个类 表示方法：实线箭头，类A指向类B(由拥有者指向被拥有者，如果A指向B，则说明A类中有B类的成员变量。) 聚合 概念：聚合关联关系的一种特例，是强的关联关系。聚合是整体和个体之间的关系，即has-a的关系，整体与个体可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。程序中聚合和关联关系是一致的，只能从语义级别来区分； 表示方法：尾部为空心菱形的实线箭头（也可以没箭头），类A指向类B 由整体指向部分。如果A指向B，则说明A类中有B类的成员变量，但是与关联关系不同，A类和B类有逻辑关系。A类是整体，B类是部分。A类由B类构成，同时B类即便不在A类中也可以单独存在。 组合 概念：组合也是关联关系的一种特例。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。 表示方法：尾部为实心菱形的实现箭头（也可以没箭头），类A指向类B 由整体指向部分。如果A指向B，则说明A类中有B类的成员变量，但是与关联关系不同，A类和B类有逻辑关系。A类是整体，B类是部分。A类由B类构成。但与聚合关系不同，如果B类不在A类中就无法单独存在。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
</search>
